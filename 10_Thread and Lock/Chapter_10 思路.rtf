{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red170\green13\blue145;
\red0\green116\blue0;\red28\green0\blue207;}
\margl1440\margr1440\vieww14400\viewh12600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Thread and Lock\
\
1. 
\f1 \'cf\'df\'b3\'cc\'ba\'cd\'bd\'f8\'b3\'cc\'b5\'c4\'c7\'f8\'b1\'f0
\f0 \
Answer:\
    Process:\
        1. Basic element of resource allocation in the operating system.\
        2. Possesses independent resources:\
            a. code segment\
            b. data segment\
                i. constant data\
                ii. global variable\
                iii. stack\
                iv. heap\
            c. register\
            d. program counter\
        3. Have independent virtual address mapping.\
        4. It has life cycle, it is running, in contrast to a program.\
    Thread:\
        1. Basic element of CPU scheduling.\
        2. Possesses part of independent resources:\
            a. register\
            b. stack\
            c. program counter\
        3. Multiple threads share part of resources in same process:\
            a. code segment\
            b. data segment\
                i. constant data\
                ii. global variable\
                iii. heap\
        4. All threads in a process share the same address space.\
        5. It has life cycle\
\
2 
\f1 \'d4\'f5\'c3\'b4\'b2\'e2\'ca\'d4
\f0 context switching\
\

\f1 \'ca\'d7\'cf\'c8\'a3\'ac\'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb\'ca\'c7\'ca\'b2\'c3\'b4\'a3\'ac\'d2\'bb\'cb\'d1\'be\'cd\'d6\'aa\'b5\'c0\'a1\'a3\'b6\'d4\'d3\'da\'d5\'e2\'c3\'b4\'d2\'bb\'b8\'f6\'bc\'ab\'b6\'cc\'b5\'c4\'ca\'b1\'bc\'e4\'a3\'ac\'d2\'aa\'b2\'e2\'c1\'bf\'b5\'c4\'bb\'b0\'a3\'ac\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd\'b7\'c5\'b4\'f3
\f0 N
\f1 \'b1\'b6\'b5\'c4\'b7\'bd\'b7\'a8\'a1\'a3\'b1\'c8\'c8\'e7\'a3\'ba\'d3\'d0
\f0 A
\f1 \'ba\'cd
\f0 B
\f1 \'c1\'bd\'bc\'fe\'ca\'c2\'a3\'ac\'b2\'a2\'c7\'d2\'be\'ad\'b3\'a3\'d2\'bb\'c6\'f0\'b7\'a2\'c9\'fa\'a3\'ac\'c3\'bf\'bc\'fe\'d6\'bb\'d0\'e8\'d2\'aa\'bb\'a8\'bc\'b8\'c4\'c9\'c3\'eb\'a1\'a3\'c8\'e7\'b9\'fb\'c4\'e3\'b0\'d1
\f0 A
\f1 \'ca\'c2\'bc\'fe\'c1\'ac\'d0\'f8\'d7\'f6\'bc\'b8\'b0\'d9\'cd\'f2\'b4\'ce\'a3\'ac\'b6\'f8
\f0 B
\f1 \'ca\'b1\'bc\'e4\'d6\'bb\'d7\'f6\'c1\'cb\'bc\'b8\'b4\'ce\'a3\'ac\'d5\'e2\'d1\'f9\'be\'cd\'c4\'dc\'c5\'c5\'b3\'fd
\f0 B
\f1 \'ca\'c2\'bc\'fe\'b6\'d4\'d3\'da\'b2\'e2\'c1\'bf\'b5\'c4\'d3\'b0\'cf\'ec\'a1\'a3\'c8\'e7\'b9\'fb\'d7\'dc\'ca\'b1\'bc\'e4
\f0 S = mA + nB
\f1 \'a1\'a3\'b5\'b1
\f0 m >> n 
\f1 \'ca\'b1\'a3\'ac
\f0 A\uc0\u8776 S / m
\f1 \'a1\'a3\'cf\'c2\'c3\'e6\'b5\'c4\'b2\'e2\'c1\'bf\'b7\'bd\'b7\'a8\'c0\'e0\'cb\'c6\'d3\'da\'b4\'f2\'c6\'b9\'c5\'d2\'c7\'f2\'a3\'ac\'d4\'da\'d6\'f7\'cf\'df\'b3\'cc\'ba\'cd\'b8\'b1\'cf\'df\'b3\'cc\'bc\'e4\'bb\'a5\'cf\'e0\'b4\'ab\'b5\'dd\'d2\'bb\'b8\'f6\'c1\'ee\'c5\'c6\'a3\'ac\'d5\'e2\'b8\'f6\'c1\'ee\'c5\'c6\'bf\'c9\'d2\'d4\'ca\'c7\'b1\'e4\'c1\'bf\'a1\'a2\'b9\'dc\'b5\'c0\'d6\'ae\'c0\'e0\'b5\'c4\'d3\'c3\'d3\'da\'cd\'a8\'d0\'c5\'b5\'c4\'b9\'a4\'be\'df\'a1\'a3\'d3\'eb\'b4\'cb\'cd\'ac\'ca\'b1\'a3\'ac\'c0\'fb\'d3\'c3\'b2\'d9\'d7\'f7\'cf\'b5\'cd\'b3\'cc\'e1\'b9\'a9\'b5\'c4\'b5\'f7\'b6\'c8\'ba\'af\'ca\'fd\'c7\'bf\'d6\'c6\'be\'f6\'b6\'a8\'b5\'f7\'b6\'c8\'cb\'b3\'d0\'f2\'a3\'ac\'d3\'c3\'d3\'da\'b4\'a5\'b7\'a2\'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb\'a1\'a3\'cf\'c2\'c3\'e6\'d5\'e2\'b7\'dd\'b4\'fa\'c2\'eb\'ce\'d2\'ca\'c7\'d5\'d5\'d7\'c5\'b6\'c1\'cd\'ea\'c1\'cb\'b2\'c5\'d0\'b4\'b5\'c4\'a3\'ac\'b3\'f5\'b4\'ce\'c5\'f6\'bc\'fb\'d5\'e2\'b8\'f6\'cc\'e2\'c4\'bf\'bb\'b9\'d5\'e6\'ca\'c7\'ce\'de\'b4\'d3\'cf\'c2\'ca\'d6\'a3\'ac\'d2\'f2\'ce\'aa\'cd\'ea\'c8\'ab\'c3\'bb\'d3\'d0\'cf\'eb\'b5\'bd\'c8\'e7\'ba\'ce\'b4\'a5\'b7\'a2\'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb
\f0 \

\f1 \'b2\'b9\'b3\'e4\'a3\'ba
\f0 \

\f1 \'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb
\f0 (
\f1 \'d3\'d0\'ca\'b1\'d2\'b2\'b3\'c6\'ce\'aa\'bd\'f8\'b3\'cc\'c7\'d0\'bb\'bb\'bb\'f2\'c8\'ce\'ce\'f1\'c7\'d0\'bb\'bb
\f0 )
\f1 \'ca\'c7\'d6\'b8
\f0 CPU 
\f1 \'b5\'c4\'bf\'d8\'d6\'c6\'c8\'a8\'b4\'d3\'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc\'bb\'f2\'cf\'df\'b3\'cc\'c7\'d0\'bb\'bb\'b5\'bd\'c1\'ed\'d2\'bb\'b8\'f6\'a1\'a3
\f0  
\f1 \'a3\'a8\'b2\'ce\'bf\'bc\'d7\'ca\'c1\'cf\'a3\'a9
\f0  
\f1 \'c0\'fd\'c8\'e7\'c8\'c3\'d2\'bb\'b8\'f6\'d5\'fd\'d4\'da\'d6\'b4\'d0\'d0\'b5\'c4\'bd\'f8\'b3\'cc\'bd\'f8\'c8\'eb\'b5\'c8\'b4\'fd\'d7\'b4\'cc\'ac
\f0 (
\f1 \'bb\'f2\'d6\'d5\'d6\'b9\'cb\'fc
\f0 )
\f1 \'a3\'ac\'cd\'ac\'ca\'b1\'c8\'a5\'d6\'b4\'d0\'d0\'c1\'ed\'d2\'bb\'b8\'f6\'d5\'fd\'d4\'da\'b5\'c8\'b4\'fd\'b5\'c4\'bd\'f8\'b3\'cc\'a1\'a3
\f0  
\f1 \'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb\'d2\'bb\'b0\'e3\'b7\'a2\'c9\'fa\'d4\'da\'b6\'e0\'c8\'ce\'ce\'f1\'cf\'b5\'cd\'b3\'d6\'d0\'a3\'ac\'b2\'d9\'d7\'f7\'cf\'b5\'cd\'b3\'b1\'d8\'d0\'eb\'b0\'d1\'b5\'c8\'b4\'fd\'bd\'f8\'b3\'cc\'b5\'c4\'d7\'b4\'cc\'ac\'d0\'c5\'cf\'a2\'d4\'d8\'c8\'eb\'c4\'da\'b4\'e6\'a3\'ac
\f0  
\f1 \'cd\'ac\'ca\'b1\'b1\'a3\'b4\'e6\'d5\'fd\'d4\'da\'d4\'cb\'d0\'d0\'b5\'c4\'bd\'f8\'b3\'cc\'b5\'c4\'d7\'b4\'cc\'ac\'d0\'c5\'cf\'a2
\f0 (
\f1 \'d2\'f2\'ce\'aa\'cb\'fc\'c2\'ed\'c9\'cf\'be\'cd\'d2\'aa\'b1\'e4\'b3\'c9\'b5\'c8\'b4\'fd\'d7\'b4\'cc\'ac\'c1\'cb
\f0 )
\f1 \'a1\'a3
\f0 \
\

\f1 \'ce\'aa\'c1\'cb\'bd\'e2\'be\'f6\'d5\'e2\'b8\'f6\'ce\'ca\'cc\'e2\'a3\'ac\'ce\'d2\'c3\'c7\'d0\'e8\'d2\'aa\'bc\'c7\'c2\'bc\'c1\'bd\'b8\'f6\'bd\'f8\'b3\'cc\'c7\'d0\'bb\'bb\'ca\'b1\'b5\'da\'d2\'bb\'cc\'f5\'d6\'b8\'c1\'ee\'ba\'cd\'d7\'ee\'ba\'f3\'d2\'bb\'cc\'f5\'d6\'b8\'c1\'ee\'b5\'c4\'ca\'b1\'bc\'e4\'b4\'c1\'a3\'ac
\f0  
\f1 \'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb\'be\'cd\'ca\'c7\'d5\'e2\'c1\'bd\'b8\'f6\'ca\'b1\'bc\'e4\'b4\'c1\'b5\'c4\'b2\'ee\'a1\'a3
\f0 \
\

\f1 \'c0\'b4\'bf\'b4\'d2\'bb\'b8\'f6\'bc\'f2\'b5\'a5\'b5\'c4\'c0\'fd\'d7\'d3\'a3\'ac\'bc\'d9\'c9\'e8\'d6\'bb\'d3\'d0\'c1\'bd\'b8\'f6\'bd\'f8\'b3\'cc\'a3\'ba
\f0 P1
\f1 \'ba\'cd
\f0 P2
\f1 \'a1\'a3
\f0 \
\
P1
\f1 \'d5\'fd\'d4\'da\'d6\'b4\'d0\'d0\'a3\'ac\'b6\'f8
\f0 P2
\f1 \'d4\'da\'b5\'c8\'b4\'fd\'a1\'a3\'d4\'da\'c4\'b3\'b8\'f6\'ca\'b1\'bf\'cc\'a3\'ac\'b2\'d9\'d7\'f7\'cf\'b5\'cd\'b3\'b4\'d3
\f0 P1
\f1 \'c7\'d0\'bb\'bb\'b5\'bd
\f0 P2
\f1 \'a1\'a3\'bc\'d9\'c9\'e8\'b4\'cb\'ca\'b1\'a3\'ac
\f0  P1
\f1 \'d6\'b4\'d0\'d0\'b5\'bd\'b5\'da
\f0 N
\f1 \'cc\'f5\'d6\'b8\'c1\'ee\'a3\'ac\'bc\'c7\'c2\'bc\'ca\'b1\'bc\'e4\'b4\'c1
\f0 Time_Stamp(P1_N)
\f1 \'a3\'ac\'b5\'b1\'b1\'be\'c0\'b4\'d4\'da\'b5\'c8\'b4\'fd\'b5\'c4
\f0 P2 
\f1 \'bf\'aa\'ca\'bc\'d6\'b4\'d0\'d0\'b5\'da
\f0 1
\f1 \'cc\'f5\'d6\'b8\'c1\'ee\'a3\'ac\'cb\'b5\'c3\'f7\'c7\'d0\'bb\'bb\'cd\'ea\'b3\'c9\'a3\'ac\'bc\'c7\'c2\'bc\'ca\'b1\'bc\'e4\'b4\'c1
\f0 Time_Stamp(P2_1)
\f1 \'a1\'a3\'d2\'f2\'b4\'cb\'a3\'ac
\f0  
\f1 \'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb\'b5\'c4\'ca\'b1\'bc\'e4\'ce\'aa\'a3\'ba
\f0 Time_Stamp(P2_1) - Time_Stamp(P1_N)\
\

\f1 \'cb\'bc\'c2\'b7\'b7\'c7\'b3\'a3\'bc\'f2\'b5\'a5\'a1\'a3\'ce\'ca\'cc\'e2\'d4\'da\'d3\'da\'a3\'ac\'ce\'d2\'c3\'c7\'c8\'e7\'ba\'ce\'d6\'aa\'b5\'c0\'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb\'ca\'c7\'ba\'ce\'ca\'b1\'b7\'a2\'c9\'fa\'b5\'c4\'a3\'bf
\f0  
\f1 \'bd\'f8\'b3\'cc\'b5\'c4\'c7\'d0\'bb\'bb\'ca\'c7\'d3\'c9\'b2\'d9\'d7\'f7\'cf\'b5\'cd\'b3\'b5\'c4\'b5\'f7\'b6\'c8\'cb\'e3\'b7\'a8\'be\'f6\'b6\'a8\'b5\'c4\'a1\'a3\'ce\'d2\'c3\'c7\'d2\'b2\'ce\'de\'b7\'a8\'bc\'c7\'c2\'bc\'bd\'f8\'b3\'cc\'d6\'d0\'c3\'bf\'b8\'f6\'d6\'b8\'c1\'ee\'b5\'c4\'ca\'b1\'bc\'e4\'b4\'c1\'a1\'a3
\f0 \
\

\f1 \'c1\'ed\'d2\'bb\'b8\'f6\'ce\'ca\'cc\'e2\'ca\'c7\'a3\'ba\'d0\'ed\'b6\'e0\'c4\'da\'ba\'cb\'bc\'b6\'cf\'df\'b3\'cc\'d2\'b2\'d7\'f6\'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb\'a3\'ac\'b6\'f8\'d3\'c3\'bb\'a7\'b6\'d4\'d3\'da\'cb\'fc\'c3\'c7\'ca\'c7\'c3\'bb\'d3\'d0\'c8\'ce\'ba\'ce\'bf\'d8\'d6\'c6\'c8\'a8\'cf\'de\'b5\'c4\'a1\'a3
\f0 \
\

\f1 \'d7\'dc\'b6\'f8\'d1\'d4\'d6\'ae\'a3\'ac\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'c8\'cf\'ce\'aa\'a3\'ac\'d5\'e2\'d7\'ee\'b6\'e0\'d6\'bb\'c4\'dc\'ca\'c7\'d2\'c0\'c0\'b5\'d3\'da\'b5\'d7\'b2\'e3\'b2\'d9\'d7\'f7\'cf\'b5\'cd\'b3\'b5\'c4\'bd\'fc\'cb\'c6\'bc\'c6\'cb\'e3\'a1\'a3
\f0  
\f1 \'d2\'bb\'b8\'f6\'bd\'fc\'cb\'c6\'b5\'c4\'bd\'e2\'b7\'a8\'ca\'c7\'bc\'c7\'c2\'bc\'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc\'bd\'e1\'ca\'f8\'ca\'b1\'b5\'c4\'ca\'b1\'bc\'e4\'b4\'c1\'a3\'ac\'c1\'ed\'d2\'bb\'b8\'f6\'bd\'f8\'b3\'cc\'bf\'aa\'ca\'bc\'b5\'c4\'ca\'b1\'bc\'e4\'b4\'c1\'bc\'b0\'c5\'c5\'b3\'fd\'b5\'c8\'b4\'fd\'ca\'b1\'bc\'e4\'a1\'a3
\f0 \
\

\f1 \'c8\'e7\'b9\'fb\'cb\'f9\'d3\'d0\'bd\'f8\'b3\'cc\'d7\'dc\'b9\'b2\'d3\'c3\'ca\'b1\'ce\'aa
\f0 T
\f1 \'a3\'ac\'c4\'c7\'c3\'b4\'d7\'dc\'b5\'c4\'c9\'cf\'cf\'c2\'ce\'c4\'c7\'d0\'bb\'bb\'ca\'b1\'bc\'e4\'ce\'aa\'a3\'ba
\f0  T - (
\f1 \'cb\'f9\'d3\'d0\'bd\'f8\'b3\'cc\'b5\'c4\'b5\'c8\'b4\'fd\'ca\'b1\'bc\'e4\'ba\'cd\'d6\'b4\'d0\'d0\'ca\'b1\'bc\'e4
\f0 )\
\
3 
\f1 \'d5\'dc\'d1\'a7\'bc\'d2\'ce\'ca\'cc\'e2\'b1\'dc\'c3\'e2\'cb\'c0\'cb\'f8
\f0 \

\f1 \'cb\'c0\'cb\'f8\'cb\'c4\'cc\'f5\'bc\'fe\'a3\'ba
\f0 1. 
\f1 \'d7\'ca\'d4\'b4\'bb\'a5\'b3\'e2\'a1\'a3
\f0 2. 
\f1 \'c7\'eb\'c7\'f3\'b1\'a3\'b3\'d6\'a1\'a3
\f0 3. 
\f1 \'b7\'c7\'c7\'c0\'d5\'bc\'a1\'a3
\f0 4. 
\f1 \'d1\'ad\'bb\'b7\'b5\'c8\'b4\'fd\'a1\'a3\'cb\'f9\'d2\'d4\'a3\'ac\'c4\'b3\'d7\'a9\'bc\'d2\'c4\'c3\'c6\'f0\'d2\'bb\'d6\'bb\'bf\'ea\'d7\'d3\'ba\'f3\'c8\'e7\'b9\'fb\'b7\'a2\'cf\'d6\'c3\'bb\'d3\'d0\'c1\'ed\'d2\'bb\'d6\'bb\'c1\'cb\'a3\'ac\'be\'cd\'b1\'d8\'d0\'eb\'b0\'d1\'ca\'d6\'c0\'ef\'d5\'e2\'d6\'bb\'bf\'ea\'d7\'d3\'b7\'c5\'cf\'c2\'a3\'ac\'d5\'e2\'d3\'a6\'b8\'c3\'ca\'c7\'cd\'a8\'b9\'fd\'c6\'c6\'bb\'b5
\f0 \'93
\f1 \'c7\'eb\'c7\'f3\'b1\'a3\'b3\'d6
\f0 \'94
\f1 \'d4\'ad\'d4\'f2\'c0\'b4\'b7\'c0\'d6\'b9\'cb\'c0\'cb\'f8\'b2\'fa\'c9\'fa\'a3\'ac\'c7\'eb\'c7\'f3\'d7\'ca\'d4\'b4\'ca\'a7\'b0\'dc\'ca\'b1\'a3\'ac\'c1\'ac\'d7\'d4\'bc\'ba\'b5\'c4\'d7\'ca\'d4\'b4\'d2\'b2\'bd\'f8\'d2\'bb\'b2\'bd\'ca\'cd\'b7\'c5\'a3\'ac\'c8\'bb\'ba\'f3\'d4\'da\'cf\'c2\'d2\'bb\'c2\'d6\'c0\'ef\'bc\'cc\'d0\'f8\'c7\'eb\'c7\'f3\'a3\'ac\'d6\'b1\'b5\'bd\'b3\'c9\'b9\'a6\'d6\'b4\'d0\'d0
\f0 \
\
\
\
// This is the class for chopsticks.\
import java.util.concurrent.locks.Lock;\
import java.util.concurrent.locks.ReentrantLock;\
\
public class Chopstick \{\
    private Lock lock;\
    \
    public Chopstick() \{\
        lock = new ReentrantLock();\
    \}\
    \
    public boolean pickUp() \{\
        return lock.tryLock();\
    \}\
    \
    public void putDown() \{\
        lock.unlock();\
    \}\
\}\
\
\
// This is the class for philosophers.\
import java.util.Vector;\
\
public class Philosopher extends Thread \{\
    private Chopstick left;\
    private Chopstick right;\
    private int id;\
    int appetite;\
\
    final int FULL_APPETITE = 10;\
\
    public Philosopher(Chopstick left, Chopstick right, int id) \{\
        // TODO Auto-generated constructor stub\
        appetite = 0;\
        this.left = left;\
        this.right = right;\
        this.id = id;\
    \}\
\
    private boolean pickUp() \{\
        if (!left.pickUp()) \{\
            return false;\
        \}\
        if (!right.pickUp()) \{\
            left.putDown();\
            return false;\
        \}\
        return true;\
    \}\
\
    private void putDown() \{\
        left.putDown();\
        right.putDown();\
    \}\
\
    public boolean eat() \{\
        while (appetite < FULL_APPETITE) \{\
            if (!pickUp()) \{\
                return false;\
            \}\
            System.out.println(id + ":chew~");\
            ++appetite;\
            putDown();\
        \}\
        return appetite == FULL_APPETITE;\
    \}\
\
    @Override\
    public void run() \{\
        // TODO Auto-generated method stub\
        super.run();\
        while (!eat()) \{\
            // Not full yet.\
        \}\
    \}\
\
    public static void main(String[] args) \{\
        final int n = 6;\
        Vector<Chopstick> chopsticks = new Vector<Chopstick>();\
        Vector<Philosopher> philosophers = new Vector<Philosopher>();\
\
        for (int i = 0; i < n; ++i) \{\
            chopsticks.add(new Chopstick());\
        \}\
        for (int i = 0; i < n; ++i) \{\
            philosophers.add(new Philosopher(chopsticks.elementAt(i),\
                    chopsticks.elementAt((i + 1) % n), i + 1));\
        \}\
        \
        for (int i = 0; i < n; ++i) \{\
            philosophers.elementAt(i).start();\
        \}\
    \}\
\}\
\

\f1 \'bd\'e2\'b7\'a8\'a3\'ba\'c4\'e3\'d3\'a6\'b8\'c3\'cf\'eb\'b5\'bd\'c1\'cb\'d3\'c3
\f0 lock
\f1 \'b5\'c4\'b7\'bd\'b7\'a8\'c0\'e0\'d7\'e8\'c8\'fb\'a3\'ac\'b2\'bb\'b9\'fd\'d5\'e2\'c0\'ef\'c3\'e6\'d3\'d0\'b8\'f6\'b8\'c5\'c4\'ee\'ce\'ca\'cc\'e2\'ca\'b9\'b5\'c3\'d6\'b1\'bd\'d3\'d3\'c3
\f0 ReentrantLock
\f1 \'b2\'bb\'c4\'dc\'cd\'a8\'b9\'fd\'b1\'e0\'d2\'eb\'a3\'a8\'b6\'d4\'d3\'da\'d2\'bb\'b8\'f6\'cb\'f8\'b6\'d4\'cf\'f3\'a3\'ac\'b2\'bb\'c4\'dc\'d4\'da
\f0 A
\f1 \'cf\'df\'b3\'cc\'d6\'d0\'cb\'f8\'b6\'a8\'a3\'ac\'d3\'d6\'d4\'da
\f0 B
\f1 \'cf\'df\'b3\'cc\'d6\'d0\'bd\'e2\'cb\'f8\'a3\'ac\'b2\'bb\'d4\'ca\'d0\'ed\'d5\'e2\'d1\'f9\'b5\'c4\'b9\'e9\'ca\'f4\'b9\'d8\'cf\'b5\'a3\'a9\'a3\'ac\'bf\'c9\'d2\'d4\'d3\'c3
\f0 Semaphore
\f1 \'c0\'b4\'b4\'ef\'b5\'bd\'cf\'e0\'cd\'ac\'b5\'c4\'c4\'bf\'b5\'c4\'a1\'a3
\f0 \
\
5 There're three methods in a class FooBar, how would you make sure that they're executed in a fixed order, in whichever order they're called?\
public class FirstRun implements Runnable \{\
    private FooBar fooBar;\
    \
    public FirstRun(FooBar fooBar) \{\
        // TODO Auto-generated constructor stub\
        this.fooBar = fooBar;\
    \}\
    \
    @Override\
    public void run() \{\
        // TODO Auto-generated method stub\
        fooBar.first();\
    \}\
\}\
\
// -----------------------------------------------------------------------------\
public class SecondRun implements Runnable \{\
    private FooBar fooBar;\
    \
    public SecondRun(FooBar fooBar) \{\
        // TODO Auto-generated constructor stub\
        this.fooBar = fooBar;\
    \}\
    \
    @Override\
    public void run() \{\
        // TODO Auto-generated method stub\
        fooBar.second();\
    \}\
\}\
\
// -----------------------------------------------------------------------------\
public class ThirdRun implements Runnable \{\
    private FooBar fooBar;\
    \
    public ThirdRun(FooBar fooBar) \{\
        // TODO Auto-generated constructor stub\
        this.fooBar = fooBar;\
    \}\
    \
    @Override\
    public void run() \{\
        // TODO Auto-generated method stub\
        fooBar.third();\
    \}\
\}\
\
// -----------------------------------------------------------------------------\
import java.util.concurrent.Semaphore;\
\
public class FooBar \{\
    private Semaphore sem1;\
    private Semaphore sem2;\
    private Semaphore sem3;\
    \
    public FooBar() \{\
        // TODO Auto-generated constructor stub\
        sem1 = new Semaphore(1);\
        sem2 = new Semaphore(1);\
        sem3 = new Semaphore(1);\
        \
        try \{\
            sem1.acquire();\
            sem2.acquire();\
            sem3.acquire();\
        \} catch (InterruptedException e) \{\
            // TODO Auto-generated catch block\
            e.printStackTrace();\
        \}\
    \}\
\
    public void first() \{\
        System.out.println("first");\
        \
        sem1.release();\
    \}\
\
    public void second() \{\
        try \{\
            sem1.acquire();\
        \} catch (InterruptedException e) \{\
            // TODO Auto-generated catch block\
            e.printStackTrace();\
        \}\
        sem1.release();\
        System.out.println("second");\
        sem2.release();\
    \}\
\
    public void third() \{\
        try \{\
            sem2.acquire();\
        \} catch (InterruptedException e) \{\
            // TODO Auto-generated catch block\
            e.printStackTrace();\
        \}\
        sem2.release();\
        System.out.println("third");\
        sem3.release();\
    \}\
\
    public static void main(String[] args) \{\
        FooBar fooBar = new FooBar();\
        Thread t1 = new Thread(new FirstRun(fooBar));\
        Thread t2 = new Thread(new SecondRun(fooBar));\
        Thread t3 = new Thread(new ThirdRun(fooBar));\
        \
        t3.start();\
        t1.start();\
        t2.start();\
    \}\
\}\
\
6 
\f1 \'ca\'b5\'cf\'d6\'d2\'bb\'b8\'f6\'b5\'a5\'c0\'fd\'c4\'a3\'ca\'bd\'b5\'c4\'c4\'a3\'b0\'e5\'a3\'ac\'b5\'b1\'b8\'f8\'d2\'bb\'b8\'f6\'c0\'e0
\f0 Foo
\f1 \'ca\'b1\'a3\'ac\'c4\'e3\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd
\f0 Singleton::instance() 
\f1 \'c0\'b4\'b5\'c3\'b5\'bd\'d2\'bb\'b8\'f6\'d6\'b8\'cf\'f2
\f0 Foo
\f1 \'c0\'e0\'b5\'a5\'c0\'fd\'b5\'c4\'d6\'b8\'d5\'eb\'a1\'a3\'bc\'d9\'c9\'e8\'ce\'d2\'c3\'c7\'cf\'d6\'d4\'da\'d2\'d1\'be\'ad\'d3\'d0\'c1\'cb
\f0 Lock
\f1 \'c0\'e0\'a3\'ac\'c6\'e4\'d6\'d0\'d3\'d0
\f0 acquire() 
\f1 \'ba\'cd
\f0 release()
\f1 \'c1\'bd\'b8\'f6\'b7\'bd\'b7\'a8\'a3\'ac\'c4\'e3\'d2\'aa\'c8\'e7\'ba\'ce\'ca\'b9\'c4\'e3\'b5\'c4\'ca\'b5\'cf\'d6\'cf\'df\'b3\'cc\'b0\'b2\'c8\'ab\'c7\'d2\'d2\'ec\'b3\'a3\'b0\'b2\'c8\'ab\'a3\'bf
\f0 \
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f2\fs22 \cf2 \CocoaLigature0 #include \cf3 <iostream>\cf2 \
\cf4 using\cf0  \cf4 namespace\cf0  std;\
\
\cf5 /* 
\f1 \'cf\'df\'b3\'cc\'cd\'ac\'b2\'bd\'cb\'f8
\f2  */\cf0 \
\cf4 class\cf0  Lock \{\
\cf4 public\cf0 :\
    Lock() \{ \cf5 /* 
\f1 \'b9\'b9\'d4\'ec\'cb\'f8
\f2  */\cf0  \}\
    ~Lock() \{ \cf5 /* 
\f1 \'ce\'f6\'b9\'b9\'cb\'f8
\f2  */\cf0  \}\
    \cf4 void\cf0  AcquireLock() \{ \cf5 /* 
\f1 \'bc\'d3\'cb\'f8\'b2\'d9\'d7\'f7
\f2  */\cf0  \}\
    \cf4 void\cf0  ReleaseLock() \{ \cf5 /* 
\f1 \'bd\'e2\'cb\'f8\'b2\'d9\'d7\'f7
\f2  */\cf0  \}\
\};\
\
\cf5 // 
\f1 \'b5\'a5\'c0\'fd\'c4\'a3\'ca\'bd\'c4\'a3\'b0\'e5\'a3\'ac\'d6\'bb\'ca\'b5\'c0\'fd\'bb\'af\'d2\'bb\'b4\'ce
\f2 \cf0 \
\cf4 template\cf0  <\cf4 typename\cf0  T>\
\cf4 class\cf0  Singleton\{\
\cf4 private\cf0 :\
    \cf4 static\cf0  Lock lock;\
    \cf4 static\cf0  T* object;\
\cf4 protected\cf0 :\
    Singleton() \{ \};\
\cf4 public\cf0 :\
    \cf4 static\cf0  T* Instance();\
\};\
\
\cf4 template\cf0  <\cf4 typename\cf0  T>\
Lock Singleton<T>::lock;\
\
\cf4 template\cf0  <\cf4 typename\cf0  T>\
T* Singleton<T>::object = \cf4 NULL\cf0 ;\
\
\cf4 template\cf0  <\cf4 typename\cf0  T>\
T* Singleton<T>::Instance()\{\
    \cf4 if\cf0  (object == \cf4 NULL\cf0 )\{\cf5 // 
\f1 \'c8\'e7\'b9\'fb
\f2 object
\f1 \'ce\'b4\'b3\'f5\'ca\'bc\'bb\'af\'a3\'ac\'bc\'d3\'cb\'f8\'b3\'f5\'ca\'bc\'bb\'af
\f2 \cf0 \
        lock.AcquireLock();\
        \cf5 //
\f1 \'d5\'e2\'c0\'ef\'d4\'d9\'c5\'d0\'b6\'cf\'d2\'bb\'b4\'ce\'a3\'ac\'d2\'f2\'ce\'aa\'b6\'e0\'b8\'f6\'cf\'df\'b3\'cc\'bf\'c9\'c4\'dc\'cd\'ac\'ca\'b1\'cd\'a8\'b9\'fd\'b5\'da\'d2\'bb\'b8\'f6
\f2 if\cf0 \
        \cf5 //
\f1 \'d6\'bb\'d3\'d0\'b5\'da\'d2\'bb\'b8\'f6\'cf\'df\'b3\'cc\'c8\'a5\'ca\'b5\'c0\'fd\'bb\'af
\f2 object
\f1 \'a3\'ac\'d6\'ae\'ba\'f3
\f2 object
\f1 \'b7\'c7
\f2 NULL\cf0 \
        \cf5 //
\f1 \'ba\'f3\'c3\'e6\'b5\'c4\'cf\'df\'b3\'cc\'b2\'bb\'d4\'d9\'ca\'b5\'c0\'fd\'bb\'af\'cb\'fc
\f2 \cf0 \
        \cf4 if\cf0  (object == \cf4 NULL\cf0 )\{\
            object = \cf4 new\cf0  T;\
        \}\
        lock.ReleaseLock();\
    \}\
    \cf4 return\cf0  object;\
\}\
\cf4 class\cf0  Foo\{\
    \
\};\
\cf4 int\cf0  main()\{\
    Foo* singleton_foo = Singleton<Foo>::Instance();\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}}