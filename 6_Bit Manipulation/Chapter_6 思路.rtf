{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red28\green0\blue207;\red0\green116\blue0;
\red196\green26\blue22;}
\margl1440\margr1440\vieww14400\viewh12600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Bit Manipulation (
\f1 \'d7\'ee\'cc\'d6\'d1\'e1\'d5\'e2\'d5\'c5
\f0 )\
\
\
1
\f1 \'a3\'ac
\f0  
\f1 \'d3\'d0\'c1\'bd\'d7\'e9\'ca\'fd\'be\'dd
\f0 M
\f1 \'ba\'cd
\f0 N
\f1 \'a3\'ac
\f0  M
\f1 \'d7\'e3\'b9\'bb\'b3\'a4\'a3\'ac\'bf\'c9\'d2\'d4\'b7\'c5\'cf\'c2N\'a3\'ac \'d2\'aa\'c7\'f3\'b0\'d1M\'b5\'c4i\'b5\'bdj\'ce\'bb\'d6\'c3\'cc\'e6\'bb\'bb\'b3\'c9N\'a1\'a3\
	\'c4\'c3\'d2\'bb\'b8\'f6\'c1\'d9\'ca\'b1\'ca\'fd\'d6\'b5\'a3\'ac\'d7\'f3\'d2\'c6i\'ce\'bb\'a3\'ac\'c8\'bb\'ba\'f3-1. \'be\'cd\'b0\'d10\'b5\'bdi-1\'ce\'bb\'c8\'ab\'b2\'bf\'b1\'e4\'b3\'c91\
	\'c8\'bb\'ba\'f3\'ba\'cdM\'b5\'c4\'d6\'b5\'c8\'a5AND\'a1\'a3 \'be\'cd\'b0\'d1M\'d6\'b50 \'b5\'bd i-1 \'ce\'bb\'b5\'c4\'ca\'fd\'be\'dd\'b1\'a3\'b4\'e6\'b5\'bd\'c1\'cb \'c1\'d9\'ca\'b1\'ca\'fd\'d7\'d6\
	\'c8\'bb\'ba\'f3\'b0\'d1M\'ca\'fd\'be\'dd\'d3\'d2\'d2\'c6 j+1 \'ce\'bb\'a3\'ac \'d4\'da\'d2\'c6\'b6\'af\'bb\'d8\'c0\'b4 \'be\'cd\'b0\'d10\'b5\'bdj\'ce\'bb\'c8\'ab\'b2\'bf\'c7\'e5\'bf\'d5\'a1\'a3 \'c8\'bb\'ba\'f3\'d4\'da\'bc\'d3\'c9\'cf N \'ca\'fd\'be\'dd \'ba\'cd\'d4\'ad\'cf\'c8\'b1\'a3\'b4\'e6\'b5\'c4 \'c1\'d9\'ca\'b1\'ca\'fd\'be\'dd
\f0 	
\f2\fs22 \cf2 \CocoaLigature0 void\cf0  print_binary(\cf2 int\cf0  n)\{\
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0
\cf0     vector<\cf2 int\cf0 > v;\
    \cf2 int\cf0  len = \cf3 8\cf0  * \cf2 sizeof\cf0 (\cf2 int\cf0 ); \cf4 // 32 bits\cf0 \
    \cf2 int\cf0  mask = \cf3 1\cf0 ;\
    \cf2 while\cf0 (len--)\{ \cf4 //iterate 32 times\cf0 \
        \cf2 if\cf0 (n&mask) v.push_back(\cf3 1\cf0 );\
        \cf2 else\cf0  v.push_back(\cf3 0\cf0 );\
        mask <<= \cf3 1\cf0 ; \cf4 // shift mask to the left\cf0 \
    \}\
    \cf2 while\cf0 (!v.empty())\{\
        cout<<v.back();\
        v.pop_back();\
    \}\
    cout<<endl;\
	\}\
\cf2 int\cf0  update_bits(\cf2 int\cf0  n, \cf2 int\cf0  m, \cf2 int\cf0  i, \cf2 int\cf0  j)\{\
    \cf2 int\cf0  ret = (\cf3 1\cf0  << i) -\cf3 1\cf0 ;\
    print_binary(ret);\
    ret &= n;  \cf4 //ret is to save the value of n from postion 0 to i-1;\cf0 \
    \cf4 // n >> (j+1) << (j+1) to clear all bits from position 0 to j;\cf0 \
    \cf4 // m << i shift value of m with i.\cf0 \
    \cf4 //it is clear now, 0 to j all clear , we restore 0 to i-1 value, keep the i to j for value of m\cf0 \
    \cf2 return\cf0  ((n>>(j+\cf3 1\cf0 )) << (j+\cf3 1\cf0 )) | (m<<i) | ret;\
\}
\f0\fs24 \CocoaLigature1 \
\
2.  
\f1 \'b0\'d1\'d2\'bb\'b8\'f6\'d7\'d6\'b7\'fb\'b4\'ae\'d7\'aa\'bb\'bb\'b3\'c9\'d0\'a1\'ca\'fd\'a3\'ac\'c8\'bb\'ba\'f3\'b1\'e4\'b3\'c92\'bd\'f8\'d6\'c6\
   \'d3\'c3atoi \'ba\'cd atof \'b5\'c3\'b5\'bd\'d5\'fb\'ca\'fd\'b2\'bf\'b7\'d6\'ba\'cd\'d0\'a1\'ca\'fd\'b2\'bf\'b7\'d6\'a1\'a3 \'d5\'fb\'ca\'fd\'b2\'bf\'b7\'d6\'ba\'dc\'bc\'f2\'b5\'a5\'a1\'a3\'d3\'eb1 and \'c8\'e7\'b9\'fb\'ca\'c71\'a3\'ac \'be\'cd\'ca\'e4\'b3\'f61\'a3\'ac \'b7\'f1\'d4\'f2\'ca\'e4\'b3\'f60. \'c8\'bb\'ba\'f3\'cf\'f2\'d3\'d2\'d2\'c6\'b6\'af\
   \'d0\'a1\'ca\'fd\'b2\'bf\'b7\'d6\'c3\'bb\'bf\'b4\'b6\'ae\'a1\'a3\'cb\'b5\'ca\'c7\'b3\'cb\'d2\'d42\'c8\'bb\'ba\'f3\'bf\'b4\'ca\'c7\'b2\'bb\'ca\'c7\'b4\'f3\'d3\'da1. \'b4\'f3\'d3\'da\'ca\'e4\'b3\'f61\'a3\'ac \'b7\'f1\'d4\'f2\'ca\'e4\'b3\'f60 \'bb\'b9\'bf\'c9\'c4\'dc\'ca\'e4\'c8\'eberror\

\f2\fs22 \CocoaLigature0  \cf2 while\cf0 (dec_part > \cf3 0\cf0 )\
    \{\
        \cf2 if\cf0 (dec_str.length() > \cf3 32\cf0 ) \cf2 return\cf0  \cf5 "ERROR"\cf0 ;\
        dec_part *= \cf3 2\cf0 ;\
        \cf2 if\cf0 (dec_part >= \cf3 1\cf0 )\
        \{\
            dec_str += \cf5 "1"\cf0 ;\
            dec_part -= \cf3 1\cf0 ;\
        \}\
        \cf2 else\cf0 \
            dec_str += \cf5 "0"\cf0 ;\
    \}\
\
3. 
\f1 \'d5\'d2\'b3\'f6\'d2\'bb\'b8\'f6\'ca\'fd\'be\'dd\'a3\'ac\'ba\'cd\'cb\'fb\'d3\'d0\'cd\'ac\'d1\'f9\'b6\'e0
\f2 \'911\'92
\f1 \'b5\'c4\'d7\'ee\'b4\'f3\'d6\'b5\'ba\'cd\'d7\'ee\'d0\'a1\'d6\'b5\'a1\'a3\'ba\'dc
\f2 sb
\f1 \'b5\'c4\'cc\'e2
\f2 \
	
\f1 \'ca\'d7\'cf\'c8\'be\'cd\'ca\'c7\'cb\'e3\'cb\'fb\'d3\'d0\'bc\'b8\'b8\'f6
\f2 1
\f1 \'a3\'ac
\f2  
\f1 \'d3\'c3\'d2\'bb\'b8\'f6
\f2 for loop 
\f1 \'b1\'e9\'c0\'fa
\f2 32
\f1 \'b4\'ce\'a3\'ac\'c3\'bf\'b4\'ce\'d3\'d2\'d2\'c6\'d2\'bb\'ce\'bb\'b8\'fa1AND\'a3\'ac\'ca\'c7\'d5\'e6\'be\'cdcnt++\'a3\'bb\
	
\f2 \cf2 int\cf0  next(\cf2 int\cf0  val)\
\{\
    \cf2 int\cf0  max_int = ~(\cf3 1\cf0  << \cf3 31\cf0 );\
    \cf2 int\cf0  num = count_one(val);\
    \cf2 if\cf0 (num == \cf3 0\cf0  || val == -\cf3 1\cf0 ) \cf2 return\cf0  -\cf3 1\cf0 ;\
    \cf2 for\cf0 (++val; count_one(val) != num && val < max_int; ++val);\
    \cf2 if\cf0 (count_one(val == num)) \cf2 return\cf0  val;\
    \cf2 return\cf0  -\cf3 1\cf0 ;\
\}\

\f1 \'cd\'f8\'c9\'cf\'d5\'d2\'b5\'c4\'b4\'f0\'b0\'b8\'a3\'ac\'bf\'b4\'d7\'c5\'b6\'d4\'a3\'ac\'b4\'f0\'b0\'b8\'b2\'bb\'b6\'d4\'a1\'a3\
\
5. \'d5\'d2\'b3\'f6\'c1\'bd\'b8\'f6\'ca\'fd\'d6\'b5\'c0\'ef\'c3\'e6\'b2\'ee\'b6\'e0\'c9\'d91\'a1\'a3\'ba\'dc\'bc\'f2\'b5\'a5\'d3\'c3xor\'d2\'bb\'b1\'c8\
6.\'bd\'bb\'bb\'bb\'c6\'e6\'c5\'bc\'ce\'bb\'a1\'a3\

\f2 \cf2 int\cf0  swap_bit(\cf2 int\cf0  val)\
\{\
    \cf2 return\cf0  ((val & \cf3 0x55555555\cf0 ) << \cf3 1\cf0 ) | ((val & \cf3 0xAAAAAAAA\cf0 ) >> \cf3 1\cf0 ); \cf4 //AND with 0x55555555 to clear odd bits\cf0 \
                                                                  \cf4 //AND with 0xAAAAAAAA to clear even bits\cf0 \
\}\
\
7. 
\f1 \'d2\'b2\'ca\'c7\'b8\'f6
\f2 sb
\f1 \'cc\'e2\'a1\'a3\'c3\'bb\'bf\'b4\'b6\'ae}