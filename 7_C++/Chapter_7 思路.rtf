{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red170\green13\blue145;
\red0\green116\blue0;\red28\green0\blue207;}
\margl1440\margr1440\vieww14400\viewh12600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 C++\
\

\f1 1. \'b4\'f2\'d3\'a1\'d2\'bb\'b8\'f6\'ce\'c4\'bc\'fe\'b5\'c4\'b5\'b9\'ca\'fdK\'d0\'d0\
	\'b7\'d6\'c5\'e4\'d2\'bb\'b8\'f6Ksize\'b5\'c4string \'ca\'fd\'d7\'e9\'a1\'a3 \'d2\'aa\'b6\'af\'cc\'ac\'b7\'d6\'c5\'e4\'c5\'b6\'a1\'a3 line\'a1\'belines%k\'a1\'bf= temp lines++\
	\'c8\'e7\'b9\'fb\'d0\'d0\'ca\'fd\'d0\'a1\'d3\'dak \'d6\'b1\'bd\'d3\'b4\'d3\'b5\'da0\'d0\'d0\'b4\'f2\'d3\'a1\
	\'c8\'e7\'b9\'fb\'d0\'d0\'ca\'fd\'b4\'f3\'d3\'dak\'a1\'a3\'d6\'b1\'bd\'d3\'b4\'d3lines%k \'d0\'d0\'bf\'aa\'ca\'bc\'b4\'f2\'d3\'a1\
	for loop line\'a1\'belines%k + i\'a1\'bf%k \'be\'cd\'ca\'c7\'b5\'da\'d2\'bb\'d0\'d0\
\
2.\
	Hash table is a data structure which holds item in buckets. Every bucket has a hash number, which is computed by a hashFunction().\
	When inserting or searching in the hash table, the key is passed to the hashFunction() to calculate the corresponding hash number, that will decide which bucket is to hold this item.\
	While there will be multiple elements with the same hash number, known as collision, the hash table has to be equipped with probing strategy, which decides where the next proper position to hold the item is.\
	    Three important properties about hash table:\
       	1. == operator\
       	2. hashFunction()\
       	3. probing strategy, such as linear, quadratic, polynomial, chaining and so on\
  	 A single operation could reach O(1) time, but collision will require extra probing time.\
    STL map is a red-black tree, which is a high-balanced binary search tree.\
   The elements in STL map is sorted, as the nodes in a BST is inserted based on comparison.\
    A single operation could reach O(log(n)) time.\
   	Two important properties aboutt STL map:\
        1. < operator\
        2. red-black tree\
3.\
 \'d0\'e9\'ba\'af\'ca\'fd\'d2\'c0\'c0\'b5\'d0\'e9\'ba\'af\'ca\'fd\'b1\'ed\'bd\'f8\'d0\'d0\'b9\'a4\'d7\'f7\'a1\'a3\'c8\'e7\'b9\'fb\'d2\'bb\'b8\'f6\'c0\'e0\'d6\'d0\'a3\'ac\'d3\'d0\'ba\'af\'ca\'fd\'b1\'bb\'b9\'d8\'bc\'fc\'b4\'cavirtual\'bd\'f8\'d0\'d0\'d0\'de\'ca\'ce\'a3\'ac \'c4\'c7\'c3\'b4\'d2\'bb\'b8\'f6\'d0\'e9\'ba\'af\'ca\'fd\'b1\'ed\'be\'cd\'bb\'e1\'b1\'bb\'b9\'b9\'bd\'a8\'c6\'f0\'c0\'b4\'b1\'a3\'b4\'e6\'d5\'e2\'b8\'f6\'c0\'e0\'d6\'d0\'d0\'e9\'ba\'af\'ca\'fd\'b5\'c4\'b5\'d8\'d6\'b7\'a1\'a3\'cd\'ac\'ca\'b1\'a3\'ac \'b1\'e0\'d2\'eb\'c6\'f7\'bb\'e1\'ce\'aa\'d5\'e2\'b8\'f6\'c0\'e0\'cc\'ed\'bc\'d3\'d2\'bb\'b8\'f6\'d2\'fe\'b2\'d8\'d6\'b8\'d5\'eb\'d6\'b8\'cf\'f2\'d0\'e9\'ba\'af\'ca\'fd\'b1\'ed\'a1\'a3\'c8\'e7\'b9\'fb\'d4\'da\'c5\'c9\'c9\'fa\'c0\'e0\'d6\'d0\'c3\'bb\'d3\'d0\'d6\'d8\'d0\'b4\'d0\'e9\'ba\'af\'ca\'fd\'a3\'ac \'c4\'c7\'c3\'b4\'a3\'ac\'c5\'c9\'c9\'fa\'c0\'e0\'d6\'d0\'d0\'e9\'b1\'ed\'b4\'e6\'b4\'a2\'b5\'c4\'ca\'c7\'b8\'b8\'c0\'e0\'d0\'e9\'ba\'af\'ca\'fd\'b5\'c4\'b5\'d8\'d6\'b7\'a1\'a3\'c3\'bf\'b5\'b1\'d0\'e9\'ba\'af\'ca\'fd\'b1\'bb\'b5\'f7\'d3\'c3\'ca\'b1\'a3\'ac \'d0\'e9\'b1\'ed\'bb\'e1\'be\'f6\'b6\'a8\'be\'df\'cc\'e5\'c8\'a5\'b5\'f7\'d3\'c3\'c4\'c4\'b8\'f6\'ba\'af\'ca\'fd\'a1\'a3\'d2\'f2\'b4\'cb\'a3\'acC++\'d6\'d0\'b5\'c4\'b6\'af\'cc\'ac\'b0\'f3\'b6\'a8\'ca\'c7\'cd\'a8\'b9\'fd\'d0\'e9\'ba\'af\'ca\'fd\'b1\'ed\'bb\'fa\'d6\'c6\'bd\'f8\'d0\'d0\'b5\'c4\'a1\'a3\
\
\'b5\'b1\'ce\'d2\'c3\'c7\'d3\'c3\'bb\'f9\'c0\'e0\'d6\'b8\'d5\'eb\'d6\'b8\'cf\'f2\'c5\'c9\'c9\'fa\'c0\'e0\'ca\'b1\'a3\'ac\'d0\'e9\'b1\'ed\'d6\'b8\'d5\'ebvptr\'d6\'b8\'cf\'f2\'c5\'c9\'c9\'fa\'c0\'e0\'b5\'c4\'d0\'e9\'ba\'af\'ca\'fd\'b1\'ed\'a1\'a3 \'d5\'e2\'b8\'f6\'bb\'fa\'d6\'c6\'bf\'c9\'d2\'d4\'b1\'a3\'d6\'a4\'c5\'c9\'c9\'fa\'c0\'e0\'d6\'d0\'b5\'c4\'d0\'e9\'ba\'af\'ca\'fd\'b1\'bb\'b5\'f7\'d3\'c3\'b5\'bd\
\
4.\
	\'c7\'b3\'bf\'bd\'b1\'b4\'b2\'a2\'b2\'bb\'b8\'b4\'d6\'c6\'ca\'fd\'be\'dd\'a3\'ac\'d6\'bb\'b8\'b4\'d6\'c6\'d6\'b8\'cf\'f2\'ca\'fd\'be\'dd\'b5\'c4\'d6\'b8\'d5\'eb\'a3\'ac\'d2\'f2\'b4\'cb\'ca\'c7\'b6\'e0\'b8\'f6\'d6\'b8\'d5\'eb\'d6\'b8\'cf\'f2\'cd\'ac\'d2\'bb\'b7\'dd\'ca\'fd\'be\'dd\'a1\'a3 \'c9\'ee\'bf\'bd\'b1\'b4\'bb\'e1\'b8\'b4\'d6\'c6\'d4\'ad\'ca\'bc\'ca\'fd\'be\'dd\'a3\'ac\'c3\'bf\'b8\'f6\'d6\'b8\'d5\'eb\'d6\'b8\'cf\'f2\'d2\'bb\'b7\'dd\'b6\'c0\'c1\'a2\'b5\'c4\'ca\'fd\'be\'dd\'a1\'a3\'cd\'a8\'b9\'fd\'cf\'c2\'c3\'e6\'b5\'c4\'b4\'fa\'c2\'eb\'a3\'ac \'bf\'c9\'d2\'d4\'c7\'e5\'b3\'fe\'b5\'d8\'bf\'b4\'b3\'f6\'cb\'fc\'c3\'c7\'b5\'c4\'c7\'f8\'b1\'f0\'a3\'ba\
\
struct Test\{\
    char *ptr;\
\};\
void shallow_copy(Test &src, Test &dest)\{\
    dest.ptr = src.ptr;\
\}\
void deep_copy(Test &src, Test &dest)\{\
    dest.ptr = (char*)malloc(strlen(src.ptr) + 1);\
    memcpy(dest.ptr, src.ptr);\
\}\
\'c7\'b3\'bf\'bd\'b1\'b4\'d4\'da\'b9\'b9\'d4\'ec\'ba\'cd\'c9\'be\'b3\'fd\'b6\'d4\'cf\'f3\'ca\'b1\'c8\'dd\'d2\'d7\'b2\'fa\'c9\'fa\'ce\'ca\'cc\'e2\'a3\'ac\'d2\'f2\'b4\'cb\'ca\'b9\'d3\'c3\'ca\'b1\'d2\'aa\'ca\'ae\'b7\'d6\'d0\'a1\'d0\'c4\'a1\'a3\'c8\'e7\'ce\'de\'b1\'d8\'d2\'aa\'a3\'ac \'be\'a1\'c1\'bf\'b2\'bb\'d3\'c3\'c7\'b3\'bf\'bd\'b1\'b4\'a1\'a3\'b5\'b1\'ce\'d2\'c3\'c7\'d2\'aa\'b4\'ab\'b5\'dd\'b8\'b4\'d4\'d3\'bd\'e1\'b9\'b9\'b5\'c4\'d0\'c5\'cf\'a2\'a3\'ac\'b6\'f8\'d3\'d6\'b2\'bb\'cf\'eb\'b2\'fa\'c9\'fa\'c1\'ed\'d2\'bb\'b7\'dd\'ca\'fd\'be\'dd\'ca\'b1\'a3\'ac \'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3\'c7\'b3\'bf\'bd\'b1\'b4\'a3\'ac\'b1\'c8\'c8\'e7\'d2\'fd\'d3\'c3\'b4\'ab\'b2\'ce\'a1\'a3\'c7\'b3\'bf\'bd\'b1\'b4\'cc\'d8\'b1\'f0\'d0\'e8\'d2\'aa\'d7\'a2\'d2\'e2\'b5\'c4\'be\'cd\'ca\'c7\'ce\'f6\'b9\'b9\'ca\'b1\'b5\'c4\'ce\'ca\'cc\'e2\'a3\'ac \'b5\'b1\'b6\'e0\'b8\'f6\'d6\'b8\'d5\'eb\'d6\'b8\'cf\'f2\'cd\'ac\'d2\'bb\'b7\'dd\'c4\'da\'b4\'e6\'ca\'b1\'a3\'ac\'c9\'be\'b3\'fd\'d5\'e2\'d0\'a9\'d6\'b8\'d5\'eb\'bd\'ab\'b5\'bc\'d6\'c2\'b6\'e0\'b4\'ce\'ca\'cd\'b7\'c5\'cd\'ac\'d2\'bb\'c4\'da\'b4\'e6\'b6\'f8\'b3\'f6\'b4\'ed\'a1\'a3\
\
\'ca\'b5\'bc\'ca\'c7\'e9\'bf\'f6\'cf\'c2\'ca\'c7\'ba\'dc\'c9\'d9\'ca\'b9\'d3\'c3\'c7\'b3\'bf\'bd\'b1\'b4\'b5\'c4\'a3\'ac\'b6\'f8\'d6\'c7\'c4\'dc\'d6\'b8\'d5\'eb\'ca\'c7\'c7\'b3\'bf\'bd\'b1\'b4\'b8\'c5\'c4\'ee\'b5\'c4\'d4\'f6\'c7\'bf\'a1\'a3 \'b1\'c8\'c8\'e7\'d6\'c7\'c4\'dc\'d6\'b8\'d5\'eb\'bf\'c9\'d2\'d4\'ce\'ac\'bb\'a4\'d2\'bb\'b8\'f6\'d2\'fd\'d3\'c3\'bc\'c6\'ca\'fd\'c0\'b4\'b1\'ed\'c3\'f7\'d6\'b8\'cf\'f2\'c4\'b3\'bf\'e9\'c4\'da\'b4\'e6\'b5\'c4\'d6\'b8\'d5\'eb\'ca\'fd\'c1\'bf\'a3\'ac \'d6\'bb\'d3\'d0\'b5\'b1\'d2\'fd\'d3\'c3\'bc\'c6\'ca\'fd\'bc\'f5\'d6\'c10\'ca\'b1\'a3\'ac\'b2\'c5\'d5\'e6\'d5\'fd\'ca\'cd\'b7\'c5\'c4\'da\'b4\'e6\'a1\'a3\
\
\'b4\'f3\'b2\'bf\'b7\'d6\'ca\'b1\'ba\'f2\'a3\'ac\'ce\'d2\'c3\'c7\'d3\'c3\'b5\'c4\'ca\'c7\'c9\'ee\'bf\'bd\'b1\'b4\'a3\'ac\'cc\'d8\'b1\'f0\'ca\'c7\'b5\'b1\'bf\'bd\'b1\'b4\'b5\'c4\'bd\'e1\'b9\'b9\'b2\'bb\'b4\'f3\'b5\'c4\'ca\'b1\'ba\'f2\'a1\'a3\
\
5.\
	volatile\'b5\'c4\'d2\'e2\'cb\'bc\'ca\'c7\'a1\'b1\'d2\'d7\'b1\'e4\'b5\'c4\'a1\'b1\'a3\'ac\'d2\'f2\'ce\'aa\'b7\'c3\'ce\'ca\'bc\'c4\'b4\'e6\'c6\'f7\'b1\'c8\'b7\'c3\'ce\'ca\'c4\'da\'b4\'e6\'d2\'aa\'bf\'ec\'b5\'c3\'b6\'e0\'a3\'ac \'cb\'f9\'d2\'d4\'b1\'e0\'d2\'eb\'c6\'f7\'d2\'bb\'b0\'e3\'b6\'bc\'bb\'e1\'d7\'f6\'bc\'f5\'c9\'d9\'b4\'e6\'c8\'a1\'c4\'da\'b4\'e6\'b5\'c4\'d3\'c5\'bb\'af\'a1\'a3volatile \'d5\'e2\'b8\'f6\'b9\'d8\'bc\'fc\'d7\'d6\'bb\'e1\'cc\'e1\'d0\'d1\'b1\'e0\'d2\'eb\'c6\'f7\'a3\'ac\'cb\'fc\'c9\'f9\'c3\'f7\'b5\'c4\'b1\'e4\'c1\'bf\'cb\'e6\'ca\'b1\'bf\'c9\'c4\'dc\'b7\'a2\'c9\'fa\'b1\'e4\'bb\'af(\'d4\'da\'cd\'e2\'b2\'bf\'b1\'bb\'d0\'de\'b8\'c4)\'a3\'ac \'d2\'f2\'b4\'cb\'a3\'ac\'d3\'eb\'b8\'c3\'b1\'e4\'c1\'bf\'cf\'e0\'b9\'d8\'b5\'c4\'b4\'fa\'c2\'eb\'b2\'bb\'d2\'aa\'bd\'f8\'d0\'d0\'b1\'e0\'d2\'eb\'d3\'c5\'bb\'af\'a3\'ac\'d2\'d4\'c3\'e2\'b3\'f6\'b4\'ed\'a1\'a3\
\'c9\'f9\'c3\'f7\'d2\'bb\'b8\'f6volatile\'b1\'e4\'c1\'bf\'a3\'ba\
volatile int x;\
int volatile x;\
\
\'c9\'f9\'c3\'f7\'d2\'bb\'b8\'f6\'d6\'b8\'d5\'eb\'a3\'ac\'d6\'b8\'cf\'f2volatile\'d0\'cd\'b5\'c4\'c4\'da\'b4\'e6(\'bc\'b4\'d6\'b8\'d5\'eb\'d6\'b8\'cf\'f2\'b5\'c4\'c4\'da\'b4\'e6\'d6\'d0\'b5\'c4\'b1\'e4\'c1\'bf\'cb\'e6\'ca\'b1\'bf\'c9\'c4\'dc\'b1\'e4\'bb\'af):\
volatile int *x;\
int volatile *x\
\
\'c9\'f9\'c3\'f7\'d2\'bb\'b8\'f6volatile\'d6\'b8\'d5\'eb\'a3\'ac\'d6\'b8\'cf\'f2\'b7\'c7volatile\'c4\'da\'b4\'e6:\
int* volatile x;\
\
\'c9\'f9\'c3\'f7\'d2\'bb\'b8\'f6volatile\'d6\'b8\'d5\'eb\'a3\'ac\'d6\'b8\'cf\'f2volatile\'c4\'da\'b4\'e6(\'bc\'b4\'d6\'b8\'d5\'eb\'ba\'cd\'d6\'b8\'d5\'eb\'cb\'f9\'d6\'b8\'ce\'ef\'b6\'bc\'cb\'e6\'bb\'fa\'bf\'c9\'c4\'dc\'b1\'e4\'bb\'af):\
volatile int * volatile x;\
int volatile * volatile x;\
volatile\'d4\'da\'c9\'f9\'c3\'f7\'c9\'cf\'b5\'c4\'ca\'b9\'d3\'c3\'ba\'cdconst\'ca\'c7\'d2\'bb\'d1\'f9\'b5\'c4\'a1\'a3volatile\'d4\'da*\'ba\'c5\'d7\'f3\'b1\'df\'a3\'ac \'d0\'de\'ca\'ce\'b5\'c4\'ca\'c7\'d6\'b8\'d5\'eb\'cb\'f9\'d6\'b8\'ce\'ef\'a3\'bb\'d4\'da*\'ba\'c5\'d3\'d2\'b1\'df\'d0\'de\'ca\'ce\'b5\'c4\'ca\'c7\'d6\'b8\'d5\'eb\'a1\'a3\
\
\'d3\'c3volatile\'d0\'de\'ca\'ce\'b5\'c4\'b1\'e4\'c1\'bf\'cf\'e0\'b9\'d8\'b5\'c4\'b4\'fa\'c2\'eb\'b2\'bb\'bb\'e1\'b1\'bb\'b1\'e0\'d2\'eb\'c6\'f7\'d3\'c5\'bb\'af\'a3\'ac\'c4\'c7\'c3\'b4\'cb\'fc\'d3\'d0\'ca\'b2\'c3\'b4\'ba\'c3\'b4\'a6\'c4\'d8\'a3\'bf \'c0\'b4\'bf\'b4\'cf\'c2\'c3\'e6\'b5\'c4\'c0\'fd\'d7\'d3\'a3\'ba\
\
int opt = 1;\
void Fn(void)\{\
	start:\
		if (opt == 1) goto start;\
		else break;\
\}\
\'c9\'cf\'ca\'f6\'b4\'fa\'c2\'eb\'bf\'b4\'c6\'f0\'c0\'b4\'be\'cd\'ca\'c7\'d2\'bb\'b8\'f6\'ce\'de\'cf\'de\'d1\'ad\'bb\'b7\'b5\'c4\'bd\'da\'d7\'e0\'a3\'ac\'b1\'e0\'d2\'eb\'c6\'f7\'bf\'c9\'c4\'dc\'bb\'e1\'bd\'ab\'cb\'fc\'d3\'c5\'bb\'af\'b3\'c9\'cf\'c2\'c3\'e6\'b5\'c4\'d1\'f9\'d7\'d3\'a3\'ba\
\
void Fn(void)\{\
	start:\
		int opt = 1;\
		if (true)\
			goto start;\
\}\
\'d3\'c9\'d3\'da\'b3\'cc\'d0\'f2\'d6\'d0\'b2\'a2\'c3\'bb\'d3\'d0\'b6\'d4opt\'bd\'f8\'d0\'d0\'d0\'de\'b8\'c4\'a3\'ac\'d2\'f2\'b4\'cb\'bd\'abif\'d6\'d0\'b5\'c4\'cc\'f5\'bc\'fe\'c9\'e8\'d6\'c3\'ce\'aa\'ba\'e3\'d5\'e6\'a1\'a3\'d5\'e2\'d1\'f9\'d2\'bb\'c0\'b4\'a3\'ac \'be\'cd\'cf\'dd\'c8\'eb\'c1\'cb\'ce\'de\'cf\'de\'d1\'ad\'bb\'b7\'d6\'d0\'a1\'a3\'b5\'ab\'ca\'c7\'a3\'ac\'c8\'e7\'b9\'fb\'ce\'d2\'c3\'c7\'b8\'f8opt\'bc\'d3\'c9\'cfvolatile\'d0\'de\'ca\'ce\'a3\'ac \'b1\'ed\'c3\'f7\'cd\'e2\'b2\'bf\'b3\'cc\'d0\'f2\'d3\'d0\'bf\'c9\'c4\'dc\'b6\'d4\'cb\'fc\'bd\'f8\'d0\'d0\'d0\'de\'b8\'c4\'a1\'a3\'c4\'c7\'c3\'b4\'a3\'ac\'b1\'e0\'d2\'eb\'c6\'f7\'be\'cd\'b2\'bb\'bb\'e1\'d7\'f6\'c9\'cf\'ca\'f6\'d3\'c5\'bb\'af\'a3\'ac \'c9\'cf\'ca\'f6\'b3\'cc\'d0\'f2\'d4\'daopt\'b1\'bb\'cd\'e2\'b2\'bf\'b3\'cc\'d0\'f2\'d0\'de\'b8\'c4\'ba\'f3\'bd\'ab\'cc\'f8\'b3\'f6\'d1\'ad\'bb\'b7\'a1\'a3\'b4\'cb\'cd\'e2\'a3\'ac \'b5\'b1\'ce\'d2\'c3\'c7\'d4\'da\'d2\'bb\'b8\'f6\'b6\'e0\'cf\'df\'b3\'cc\'b3\'cc\'d0\'f2\'d6\'d0\'c9\'f9\'c3\'f7\'c1\'cb\'d2\'bb\'d0\'a9\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'a3\'ac\'c7\'d2\'c8\'ce\'ba\'ce\'d2\'bb\'b8\'f6\'cf\'df\'b3\'cc\'b6\'bc\'bf\'c9\'d2\'d4\'d0\'de\'b8\'c4\'d5\'e2\'d0\'a9\'b1\'e4\'c1\'bf\'ca\'b1\'a3\'ac \'b9\'d8\'bc\'fc\'d7\'d6volatile\'d2\'b2\'bb\'e1\'c5\'c9\'c9\'cf\'d3\'c3\'b3\'a1\'a1\'a3\'d4\'da\'d5\'e2\'d6\'d6\'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac \'ce\'d2\'c3\'c7\'be\'cd\'d2\'aa\'c3\'f7\'c8\'b7\'b5\'d8\'b8\'e6\'cb\'df\'b1\'e0\'d2\'eb\'c6\'f7\'b2\'bb\'d2\'aa\'b6\'d4\'d5\'e2\'d0\'a9\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'b5\'c4\'cf\'e0\'b9\'d8\'b4\'fa\'c2\'eb\'d7\'f6\'d3\'c5\'bb\'af\'a1\'a3\
\
7\
Why does a destructor in base class need to be declared virtual?\
\
\'d2\'eb\'ce\'c4\'a3\'ba\
\
\'ce\'aa\'ca\'b2\'c3\'b4\'bb\'f9\'c0\'e0\'d6\'d0\'b5\'c4\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'d2\'aa\'c9\'f9\'c3\'f7\'ce\'aa\'d0\'e9\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'a3\'bf\
\
\'bd\'e2\'b4\'f0\
\
\'d3\'c3\'b6\'d4\'cf\'f3\'d6\'b8\'d5\'eb\'c0\'b4\'b5\'f7\'d3\'c3\'d2\'bb\'b8\'f6\'ba\'af\'ca\'fd\'a3\'ac\'d3\'d0\'d2\'d4\'cf\'c2\'c1\'bd\'d6\'d6\'c7\'e9\'bf\'f6\'a3\'ba\
\
\'c8\'e7\'b9\'fb\'ca\'c7\'d0\'e9\'ba\'af\'ca\'fd\'a3\'ac\'bb\'e1\'b5\'f7\'d3\'c3\'c5\'c9\'c9\'fa\'c0\'e0\'d6\'d0\'b5\'c4\'b0\'e6\'b1\'be\'a1\'a3\
\
\'c8\'e7\'b9\'fb\'ca\'c7\'b7\'c7\'d0\'e9\'ba\'af\'ca\'fd\'a3\'ac\'bb\'e1\'b5\'f7\'d3\'c3\'d6\'b8\'d5\'eb\'cb\'f9\'d6\'b8\'c0\'e0\'d0\'cd\'b5\'c4\'ca\'b5\'cf\'d6\'b0\'e6\'b1\'be\'a1\'a3\
\
\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'d2\'b2\'bb\'e1\'d7\'f1\'d1\'ad\'d2\'d4\'c9\'cf\'c1\'bd\'d6\'d6\'c7\'e9\'bf\'f6\'a3\'ac\'d2\'f2\'ce\'aa\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'d2\'b2\'ca\'c7\'ba\'af\'ca\'fd\'c2\'ef\'a3\'ac\'b2\'bb\'d2\'aa\'b0\'d1\'cb\'fc\'bf\'b4\'b5\'c3\'cc\'ab\'cc\'d8\'ca\'e2\'a1\'a3 \'b5\'b1\'b6\'d4\'cf\'f3\'b3\'f6\'c1\'cb\'d7\'f7\'d3\'c3\'d3\'f2\'bb\'f2\'ca\'c7\'ce\'d2\'c3\'c7\'c9\'be\'b3\'fd\'b6\'d4\'cf\'f3\'d6\'b8\'d5\'eb\'a3\'ac\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'be\'cd\'bb\'e1\'b1\'bb\'b5\'f7\'d3\'c3\'a1\'a3\
\
\'b5\'b1\'c5\'c9\'c9\'fa\'c0\'e0\'b6\'d4\'cf\'f3\'b3\'f6\'c1\'cb\'d7\'f7\'d3\'c3\'d3\'f2\'a3\'ac\'c5\'c9\'c9\'fa\'c0\'e0\'b5\'c4\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'bb\'e1\'cf\'c8\'b5\'f7\'d3\'c3\'a3\'ac\'c8\'bb\'ba\'f3\'d4\'d9\'b5\'f7\'d3\'c3\'cb\'fc\'b8\'b8\'c0\'e0\'b5\'c4\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'a3\'ac \'d5\'e2\'d1\'f9\'c4\'dc\'b1\'a3\'d6\'a4\'b7\'d6\'c5\'e4\'b8\'f8\'b6\'d4\'cf\'f3\'b5\'c4\'c4\'da\'b4\'e6\'b5\'c3\'b5\'bd\'d5\'fd\'c8\'b7\'ca\'cd\'b7\'c5\'a1\'a3\
\
\'b5\'ab\'ca\'c7\'a3\'ac\'c8\'e7\'b9\'fb\'ce\'d2\'c3\'c7\'c9\'be\'b3\'fd\'d2\'bb\'b8\'f6\'d6\'b8\'cf\'f2\'c5\'c9\'c9\'fa\'c0\'e0\'b6\'d4\'cf\'f3\'b5\'c4\'bb\'f9\'c0\'e0\'d6\'b8\'d5\'eb\'a3\'ac\'b6\'f8\'bb\'f9\'c0\'e0\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'d3\'d6\'ca\'c7\'b7\'c7\'d0\'e9\'b5\'c4\'bb\'b0\'a3\'ac \'c4\'c7\'c3\'b4\'be\'cd\'bb\'e1\'cf\'c8\'b5\'f7\'d3\'c3\'bb\'f9\'c0\'e0\'b5\'c4\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd(\'c9\'cf\'c3\'e6\'b5\'da2\'d6\'d6\'c7\'e9\'bf\'f6)\'a3\'ac\'c5\'c9\'c9\'fa\'c0\'e0\'b5\'c4\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'b5\'c3\'b2\'bb\'b5\'bd\'b5\'f7\'d3\'c3\'a1\'a3\
\
\'c7\'eb\'bf\'b4\'c0\'fd\'d7\'d3\'a3\'ba\
\
class Base\{\
public:\
    Base() \{ cout<<"Base Constructor"<<endl; \}\
    ~Base() \{ cout<<"Base Destructor"<<endl; \}\
\};\
class Derived: public Base\{\
public:\
    Derived() \{ cout<<"Derived Constructor"<<endl; \}\
    ~Derived() \{ cout<<"Derived Destructor"<<endl; \}\
\};\
int main()\{\
    Base *p = new Derived();\
    delete p;\
    return 0;\
\}\
\'ca\'e4\'b3\'f6\'ca\'c7\'a3\'ba\
\
Base Constructor\
Derived Constructor\
\
Base Destructor\
\'c8\'e7\'b9\'fb\'ce\'d2\'c3\'c7\'b0\'d1\'bb\'f9\'c0\'e0\'b5\'c4\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7\'ce\'aa\'d0\'e9\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'a3\'ac\'d5\'e2\'bb\'e1\'ca\'b9\'b5\'c3\'cb\'f9\'d3\'d0\'c5\'c9\'c9\'fa\'c0\'e0\'b5\'c4\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'d2\'b2\'ce\'aa\'d0\'e9\'a1\'a3 \'b4\'d3\'b6\'f8\'ca\'b9\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'b5\'c3\'b5\'bd\'d5\'fd\'c8\'b7\'b5\'f7\'d3\'c3\'a1\'a3\
\
\'bd\'ab\'bb\'f9\'c0\'e0\'b5\'c4\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7\'ce\'aa\'d0\'e9\'b5\'c4\'d6\'ae\'ba\'f3\'a3\'ac\'b5\'c3\'b5\'bd\'b5\'c4\'ca\'e4\'b3\'f6\'ca\'c7\'a3\'ba\
\
Base Constructor\
Derived Constructor\
Derived Destructor\
Base Destructor\
\'d2\'f2\'b4\'cb\'a3\'ac\'c8\'e7\'b9\'fb\'ce\'d2\'c3\'c7\'bf\'c9\'c4\'dc\'bb\'e1\'c9\'be\'b3\'fd\'d2\'bb\'b8\'f6\'d6\'b8\'cf\'f2\'c5\'c9\'c9\'fa\'c0\'e0\'b5\'c4\'bb\'f9\'c0\'e0\'d6\'b8\'d5\'eb\'ca\'b1\'a3\'ac\'d3\'a6\'b8\'c3\'b0\'d1\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'c9\'f9\'c3\'f7\'ce\'aa\'d0\'e9\'ba\'af\'ca\'fd\'a1\'a3 \'ca\'c2\'ca\'b5\'c9\'cf\'a3\'ac\'a1\'b6Effective C++\'a1\'b7\'d6\'d0\'b5\'c4\'b9\'db\'b5\'e3\'ca\'c7\'a3\'ac\'d6\'bb\'d2\'aa\'d2\'bb\'b8\'f6\'c0\'e0\'d3\'d0\'bf\'c9\'c4\'dc\'bb\'e1\'b1\'bb\'c6\'e4\'cb\'fc\'c0\'e0\'cb\'f9\'bc\'cc\'b3\'d0\'a3\'ac \'be\'cd\'d3\'a6\'b8\'c3\'c9\'f9\'c3\'f7\'d0\'e9\'ce\'f6\'b9\'b9\'ba\'af\'ca\'fd\'a1\'a3\
\
8\
\'d0\'b4\'d2\'bb\'b8\'f6\'ba\'af\'ca\'fd\'a3\'ac\'c6\'e4\'d6\'d0\'d2\'bb\'b8\'f6\'b2\'ce\'ca\'fd\'ca\'c7\'d6\'b8\'cf\'f2Node\'bd\'e1\'b9\'b9\'b5\'c4\'d6\'b8\'d5\'eb\'a3\'ac\'b7\'b5\'bb\'d8\'b4\'ab\'c8\'eb\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9\'b5\'c4\'d2\'bb\'b7\'dd\'cd\'ea\'c8\'ab\'bf\'bd\'b1\'b4\'a1\'a3 Node\'bd\'e1\'b9\'b9\'b0\'fc\'ba\'ac\'c1\'bd\'b8\'f6\'d6\'b8\'d5\'eb\'a3\'ac\'d6\'b8\'cf\'f2\'c1\'ed\'cd\'e2\'c1\'bd\'b8\'f6Node\'a1\'a3\
\
\'bd\'e2\'b4\'f0\
\
\'d2\'d4\'cf\'c2\'cb\'e3\'b7\'a8\'bd\'ab\'ce\'ac\'bb\'a4\'d2\'bb\'b8\'f6\'b4\'d3\'d4\'ad\'bd\'e1\'b9\'b9\'b5\'c4\'b5\'d8\'d6\'b7\'b5\'bd\'d0\'c2\'bd\'e1\'b9\'b9\'b5\'c4\'b5\'d8\'d6\'b7\'b5\'c4\'d3\'b3\'c9\'e4\'a3\'ac \'d5\'e2\'d6\'d6\'d3\'b3\'c9\'e4\'bf\'c9\'d2\'d4\'c8\'c3\'b3\'cc\'d0\'f2\'b7\'a2\'cf\'d6\'d6\'ae\'c7\'b0\'d2\'d1\'be\'ad\'bf\'bd\'b1\'b4\'b5\'c4\'bd\'e1\'b5\'e3\'a3\'ac\'b4\'d3\'b6\'f8\'b2\'bb\'d3\'c3\'ce\'aa\'d2\'d1\'d3\'d0\'bd\'e1\'b5\'e3\'d4\'d9\'bf\'bd\'b1\'b4\'d2\'bb\'b7\'dd\'a1\'a3 \'d3\'c9\'d3\'da\'bd\'e1\'b5\'e3\'d6\'d0\'b0\'fc\'ba\'ac\'d6\'b8\'cf\'f2Node\'b5\'c4\'d6\'b8\'d5\'eb\'a3\'ac\'ce\'d2\'c3\'c7\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd\'b5\'dd\'b9\'e9\'b5\'c4\'b7\'bd\'ca\'bd\'bd\'f8\'d0\'d0\'bd\'e1\'b5\'e3\'b8\'b4\'d6\'c6\'a1\'a3\'d2\'d4\'cf\'c2\'ca\'c7\'b4\'fa\'c2\'eb\'a3\'ba\
\
typedef map<Node*, Node*> NodeMap;\
Node* copy_recursive(Node *cur, NodeMap &nodeMap)\{\
    if(cur == NULL)\{\
        return NULL;\
    \}\
    NodeMap::iterator i = nodeMap.find(cur);\
    if (i != nodeMap.end())\{\
        // we\'a1\'afve been here before, return the copy\
        return i->second;\
    \}\
    Node *node = new Node;\
    nodeMap[cur] = node; // map current node before traversing links\
    node->ptr1 = copy_recursive(cur->ptr1, nodeMap);\
    node->ptr2 = copy_recursive(cur->ptr2, nodeMap);\
    return node;\
\}\
Node* copy_structure(Node* root)\{\
    NodeMap nodeMap; // we will need an empty map\
    return copy_recursive(root, nodeMap);\
\}\
\
9\
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f2\fs22 \cf2 \CocoaLigature0 #include \cf3 <iostream>\cf2 \
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0
\cf4 using\cf0  \cf4 namespace\cf0  std;\
\
\cf5 //template <class T>\cf0 \
\cf4 template\cf0  <\cf4 typename\cf0  T>\
\cf4 class\cf0  Pointer \{\
\cf4 public\cf0 :\
    Pointer(T *ptr) \{\
        data = ptr;\
        ref_count = \cf4 new\cf0  \cf4 int\cf0 (\cf6 1\cf0 );\
    \};\
    \
    Pointer(Pointer<T> &p) \{\
        data = p.data;\
        ref_count = p.ref_count;\
        ++(*ref_count);\
    \};\
    \
    Pointer<T>& \cf4 operator\cf0  = (Pointer<T> &p) \{\
        \cf4 if\cf0  (\cf4 this\cf0  == &p) \{\
            \cf5 // nothing to do.\cf0 \
            \cf4 return\cf0  *\cf4 this\cf0 ;\
        \}\
        \cf4 if\cf0  (*ref_count > \cf6 0\cf0 ) \{\
            cout << \cf3 "operator= clear"\cf0  << endl;\
            remove();\
        \}\
        data = p.data;\
        ref_count = p.ref_count;\
        ++(*ref_count);\
        \
        \cf4 return\cf0  *\cf4 this\cf0 ;\
    \};\
    \
    T getData() \{\
        \cf4 return\cf0  *data;\
    \};\
    \
    \cf4 void\cf0  setData(\cf4 const\cf0  T &val) \{\
        *data  = val;\
    \};\
    \
    \cf4 int\cf0  getcount()\
    \{\
        \cf4 return\cf0  *ref_count;\
    \}\
    \
    ~Pointer() \{\
        remove();\
    \};\
\cf4 protected\cf0 :\
    T *data;\
    \cf4 int\cf0  *ref_count;\
    \
    \cf4 void\cf0  remove() \{\
        --(*ref_count);\
        \cf4 if\cf0  (*ref_count == \cf6 0\cf0 ) \{\
            \cf5 // if the reference count becomes 0, the data is never to be found again.\cf0 \
            \cf5 // it must be freed.\cf0 \
            cout << \cf3 "destructor clear"\cf0  << endl;\
            \cf4 delete\cf0  data;\
            data = \cf4 nullptr\cf0 ;\
            \cf4 delete\cf0  ref_count;\
            ref_count = \cf4 nullptr\cf0 ;\
        \}\
    \};\
\};\
\
\cf4 int\cf0  main()\
\{\
    \cf4 int\cf0  *ptr = \cf4 new\cf0  \cf4 int\cf0 (\cf6 7\cf0 );\
    \cf4 int\cf0  *ptr2 = \cf4 new\cf0  \cf4 int\cf0  (\cf6 3\cf0 );\
    Pointer<\cf4 int\cf0 > p1(ptr);\
    Pointer<\cf4 int\cf0 > p2(ptr2);\
    Pointer<\cf4 int\cf0 > p3 = p1;\
\cf5 //   // cout << p1.getData() << endl;\cf0 \
\cf5 //    p2.setData(12);\cf0 \
\cf5 //   // cout << p2.getData() << endl;\cf0 \
\cf5 //    p3.setData(15);\cf0 \
\cf5 //    cout << p1.getData() << endl;\cf0 \
\cf5 //    cout << p2.getData() << endl;\cf0 \
\cf5 //    cout << p3.getData() << endl;\cf0 \
    cout << p1.getcount() <<\cf3 " "\cf0 << p2.getcount() <<\cf3 " "\cf0  << p3.getcount() << endl;\
    p2 = p3; \cf5 // p2 points p3, so ptr2 needs to be clear\cf0 \
    cout << p1.getcount() <<\cf3 " "\cf0 << p2.getcount() <<\cf3 " "\cf0  << p3.getcount() << endl;\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\

\f1 \'b4\'f0\'b0\'b8\'a3\'ba
\f2 2
\f1 \'a3\'ac
\f2 1
\f1 \'a3\'ac
\f2 2   3
\f1 \'a3\'ac
\f2 3
\f1 \'a3\'ac
\f2 3\
\
11\
Write a function called my2DAlloc which allocates a two dimensional array. Minimize the number of calls to malloc and make sure that the memory is accessible by the notation arr[i][j].\

\f1 \'ce\'d2\'c3\'c7\'d0\'e8\'d2\'aa\'b4\'e6\'b4\'a2\'d6\'b8\'cf\'f2\'c3\'bf\'d2\'bb\'d0\'d0\'b5\'c4\'b5\'d8\'d6\'b7\'a3\'ac\'b4\'f3\'d0\'a1\'ce\'aa\'a3\'ba
\f2 \
\
int header = rows * sizeof(int*);\

\f1 \'cd\'ac\'ca\'b1\'d0\'e8\'d2\'aa\'b4\'e6\'b4\'a2
\f2 rows*cols
\f1 \'b5\'c4\'d5\'fb\'d0\'cd\'ca\'fd\'be\'dd\'a3\'ac\'b4\'f3\'d0\'a1\'ce\'aa\'a3\'ba
\f2 \
\
int data = rows * cols * sizeof(int);\

\f1 \'ce\'d2\'c3\'c7\'d2\'bb\'b4\'ce\'d0\'d4\'bd\'ab\'d5\'e2\'d0\'a9\'bf\'d5\'bc\'e4\'c9\'ea\'c7\'eb\'cf\'c2\'c0\'b4\'a3\'ba
\f2 \
\
int **arr = (int**)malloc(header + data);\

\f1 \'d3\'c9\'d3\'da\'c7\'b0\'c3\'e6
\f2 rows * sizeof(int*)
\f1 \'b5\'c4\'b4\'f3\'d0\'a1\'b4\'e6\'b7\'c5\'b5\'c4\'ca\'c7\'d6\'b8\'d5\'eb\'a3\'ac\'d2\'f2\'b4\'cb
\f2 arr
\f1 \'c0\'e0\'d0\'cd\'ca\'c7
\f2 int**
\f1 \'a1\'a3
\f2  
\f1 \'b6\'f8\'bf\'e7\'b9\'fd
\f2 rows
\f1 \'b8\'f6\'b5\'a5\'d4\'aa\'ba\'f3\'a3\'ac\'ba\'f3\'c3\'e6\'b4\'e6\'b7\'c5\'b5\'c4\'ca\'c7\'d5\'fb\'d0\'cd\'ca\'fd\'be\'dd\'a3\'ac\'d2\'f2\'b4\'cb\'d0\'e8\'d2\'aa\'bd\'ab\'c6\'e4\'c0\'e0\'d0\'cd\'d7\'aa\'ce\'aa
\f2 int*
\f1 \'a3\'ba
\f2 \
\
int *buf = (int*)(arr + rows);\

\f1 \'d7\'ee\'ba\'f3\'a3\'ac\'b4\'d3
\f2 buf
\f1 \'d6\'b8\'cf\'f2\'b5\'c4\'b5\'d8\'d6\'b7\'bf\'aa\'ca\'bc\'a3\'ac\'c3\'bf
\f2 cols
\f1 \'b8\'f6\'b5\'a5\'d4\'aa\'d7\'e9\'b3\'c9\'d2\'bb\'d0\'d0\'a3\'ac\'bd\'ab\'d0\'d0\'ca\'d7\'b5\'d8\'d6\'b7\'b4\'e6\'b7\'c5\'b5\'bd
\f2 arr 
\f1 \'b5\'c4\'cf\'e0\'d3\'a6\'ce\'bb\'d6\'c3\'bc\'b4\'bf\'c9\'a1\'a3
\f2 \
\
for(int i=0; i<rows; ++i)\
    arr[i] = buf + i * cols;\

\f1 \'b4\'fa\'c2\'eb\'c8\'e7\'cf\'c2\'a3\'ba
\f2 \
\
int** My2DAlloc1(int rows, int cols)\{\
    int header = rows * sizeof(int*);\
    int data = rows * cols * sizeof(int);\
    int **arr = (int**)malloc(header + data);\
    int *buf = (int*)(arr + rows);\
    for(int i=0; i<rows; ++i)\
        arr[i] = buf + i * cols;\
    return arr;\
\}\

\f1 \'d5\'e2\'d1\'f9\'d2\'bb\'c0\'b4\'a3\'ac\'ce\'d2\'c3\'c7\'ca\'b9\'d3\'c3\'d2\'bb\'b4\'ce\'b5\'c4
\f2 malloc
\f1 \'be\'cd\'bf\'c9\'d2\'d4\'b6\'af\'cc\'ac\'b5\'d8\'c9\'ea\'c7\'eb\'b6\'fe\'ce\'ac\'ca\'fd\'d7\'e9\'bf\'d5\'bc\'e4\'a3\'ac
\f2  
\f1 \'b2\'a2\'c7\'d2\'bf\'c9\'d2\'d4\'d3\'c3
\f2 arr[i][j]
\f1 \'b6\'d4\'ca\'fd\'d7\'e9\'d4\'aa\'cb\'d8\'bd\'f8\'d0\'d0\'b7\'c3\'ce\'ca\'a1\'a3
\fs24 \CocoaLigature1 \
}