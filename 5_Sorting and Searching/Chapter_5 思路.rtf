{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red28\green0\blue207;\red0\green116\blue0;
}
\margl1440\margr1440\vieww14400\viewh12600\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Sorting an Searching\
\
\
1. 
\f1 \'d2\'d1\'d6\'aa\'c1\'bd\'b8\'f6\'d2\'d1\'be\'ad\'c5\'c5\'d0\'f2\'b5\'c4\'ca\'fd\'d7\'e9\'a3\'ac\'d2\'bb\'b8\'f6\'ca\'fd\'d7\'e9\'d3\'d0\'d7\'e3\'b9\'bb\'bf\'d5\'bc\'e4\'b7\'c5\'cf\'c2\'c1\'ed\'d2\'bb\'b8\'f6\'ca\'fd\'d7\'e9\'a3\'ac\'d4\'f5\'c3\'b4\'ba\'cf\'b2\'a2\'cb\'fb\'c3\'c7\
   \'b4\'d3\'d7\'ee\'ba\'f3\'bf\'aa\'ca\'bc\'b1\'c8\'bd\'cf\'a3\'ac\'c8\'e7\'b9\'fb\'d0\'a1\'ca\'fd\'d7\'e9\'b5\'c4\'d6\'b5\'b4\'f3\'d3\'da\'b4\'f3\'ca\'fd\'d7\'e9\'b5\'c4\'d6\'b5\'a3\'ac\'c4\'c7\'c3\'b4\'be\'cd\'b7\'c5\'d0\'a1\'ca\'fd\'d7\'e9\'b5\'c4\'d6\'b5\'c8\'a5\'d0\'c2\'b5\'c4\'ca\'fd\'d7\'e9\'b5\'c4\'ce\'b2\'b6\'cb\'a3\'acindex\'cf\'f2\'c7\'b0\'d2\'c6\'b6\'af\'a1\'a3\
	
\f2\fs22 \cf2 \CocoaLigature0 void\cf0  merge(\cf2 int\cf0  a[], \cf2 int\cf0  b[], \cf2 int\cf0  lastA, \cf2 int\cf0  lastB)\
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0
\cf0 \{\
    \cf2 int\cf0  indexA = lastA - \cf3 1\cf0 ;\
    \cf2 int\cf0  indexB = lastB - \cf3 1\cf0 ;\
    \cf2 int\cf0  indexMerged = lastB + lastA - \cf3 1\cf0 ;\
    \
    \cf2 while\cf0 (indexB >= \cf3 0\cf0 )\
    \{\
        \cf2 if\cf0 (indexA >= \cf3 0\cf0  && a[indexA] > b[indexB])\
        \{\
            a[indexMerged] = a[indexA];\
            indexA--;\
        \}\
        \cf2 else\cf0 \
        \{\
            a[indexMerged] = b[indexB];\
            indexB--;\
        \}\
        indexMerged--;\
    \}\
\}\
\
2. 
\f1 \'c5\'c5\'d0\'f2\'cd\'ac\'ce\'bb\'d7\'d6\'b7\'fb\'b4\'ae\'a3\'ac\'c8\'c3\'cb\'fb\'c3\'c7\'b6\'bc\'c1\'d9\'bd\'fc\'b6\'d4\'b7\'bd\
	\'d6\'f7\'d2\'aa\'d3\'c3\'b5\'bdSTL\'b5\'c4sort \'ba\'af\'ca\'fd\'a3\'ac\'d7\'d4\'bc\'ba\'d6\'bb\'d0\'e8\'d2\'aa\'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6cmp\'ba\'af\'ca\'fd\'a1\'a3\'b1\'c8\'bd\'cf\'cb\'fb\'b5\'c4\'b3\'a4\'b6\'c8\'a1\'a3\
\
3.  \'d2\'bb\'b8\'f6\'d2\'d1\'be\'ad\'c5\'c5\'d0\'f2\'b5\'c4\'ca\'fd\'d7\'e9\'b1\'bb\'d0\'fd\'d7\'aa\'c1\'cb\'b6\'e0\'b4\'ce\'a3\'ac\'cf\'d6\'d4\'da\'cf\'eb\'d5\'d2\'b5\'bd\'b8\'f8\'b6\'a8\'b5\'c4\'d6\'b5\'a1\'a3\
	\'d2\'bb\'bf\'b4\'b5\'bd\'d2\'d1\'be\'ad\'c5\'c5\'d0\'f2\'b5\'c4\'ce\'ca\'cc\'e2\'a3\'ac\'d7\'ee\'bf\'ec\'b5\'c4\'b7\'bd\'b7\'a8\'be\'cd\'ca\'c7BST\'a3\'ac\'c3\'bb\'b4\'ed\'a3\'a1\'a3\'a1\
	\'b5\'ab\'ca\'c7\'ca\'fd\'d7\'e9\'b1\'bb\'d0\'fd\'d7\'aa\'a3\'ac\'cb\'f9\'d2\'d4\'ce\'d2\'c3\'c7\'cd\'a8\'b9\'fd\'b5\'dd\'b9\'e9\'b2\'bb\'cd\'a3\'b5\'c4\'cb\'f8\'b6\'a8\'cb\'fb\'b5\'c4\'b7\'b6\'ce\'a7\'a1\'a3\'bc\'b8\'d6\'d6\'c7\'e9\'bf\'f6\
       \'d7\'f3\'b1\'df\'b1\'c8\'d6\'d0\'bc\'e4\'d0\'a1 \'a3\'a8\'d3\'d0\'bf\'c9\'c4\'dc\'ca\'c7\'b5\'dd\'d4\'f6\'a3\'ac\'b8\'f8\'b6\'a8\'b5\'c4\'d6\'b5\'b1\'c8\'d6\'d0\'d6\'b5\'d0\'a1\'a3\'ac\'c4\'c7\'c3\'b4\'cb\'d1\'d7\'f3\'b1\'df\'a3\'ac\'b8\'f8\'b6\'a8\'b5\'c4\'d6\'b5\'b1\'c8\'d6\'d0\'d6\'b5\'b4\'f3\'a3\'ac\'c4\'c7\'c3\'b4\'cb\'d1\'d3\'d2\'b1\'df\'a3\'a9\
	\'d7\'f3\'b1\'df\'b1\'c8\'d6\'d0\'d6\'b5\'b4\'f3 \'a3\'a8\'d3\'d0\'bf\'c9\'c4\'dc\'ca\'c7\'b5\'dd\'bc\'f5\'a3\'ac\'b1\'bb\'d0\'fd\'d7\'aa\'c1\'cb\'a1\'a3 \'b8\'f8\'b6\'a8\'b5\'c4\'d6\'b5\'b1\'c8\'d6\'d0\'d6\'b5\'d0\'a1\'a3\'ac\'c4\'c7\'c3\'b4\'cb\'d1\'d3\'d2\'b1\'df\'a3\'ac\'b8\'f8\'b6\'a8\'b5\'c4\'d6\'b5\'b1\'c8\'d6\'d0\'d6\'b5\'b4\'f3\'a3\'ac\'c4\'c7\'c3\'b4\'cb\'d1\'d7\'f3\'b1\'df\'a3\'a9\
	\'d7\'f3\'b1\'df\'b5\'c4\'d6\'b5\'b8\'fa\'d6\'d0\'d6\'b5\'d2\'bb\'d1\'f9\'b4\'f3\'a3\'a8\'c8\'e7\'b9\'fb\'d6\'d0\'d6\'b5\'ba\'cd\'d3\'d2\'b1\'df\'b2\'bb\'d2\'bb\'d1\'f9\'a3\'ac\'cb\'b5\'c3\'f7\'b2\'bb\'ca\'c7\'d2\'bb\'d1\'f9\'b5\'c4\'a1\'a3\'cb\'d1\'d3\'d2\'b1\'df\'a3\'ac \'b7\'f1\'d4\'f2\'cb\'d1\'d7\'f3\'b1\'df\'a3\'a9\'b2\'ee\'b2\'bb\'b6\'e0\'be\'cd\'d5\'e2\'d0\'a9\'c7\'e9\'bf\'f6\
\
5 \'b8\'f8\'d2\'bb\'d7\'e9\'d2\'d1\'be\'ad\'c5\'c5\'d0\'f2\'b9\'fd\'ba\'f3\'b5\'c4\'d7\'d6\'b7\'fb\'b4\'ae\'a3\'ac\'b5\'ab\'ca\'c7\'c0\'ef\'c3\'e6\'bc\'d0\'d4\'d3\'d7\'c5\'bf\'d5\'d7\'d6\'b7\'fb\'a3\'ac\'d4\'f5\'c3\'b4\'d5\'d2\'b8\'f8\'b6\'a8\'d7\'d6\'b7\'fb\
	\'bb\'b9\'ca\'c7BST\'b5\'c4\'cb\'bc\'c2\'b7\'a3\'ac\'b5\'ab\'ca\'c7\'c9\'d4\'ce\'a2\'d2\'aa\'bc\'d3\'d2\'bb\'b5\'e3\'cc\'f5\'bc\'fe\
      	\'d5\'d2\'b5\'bd\'d6\'d0\'d6\'b5\'d2\'d4\'ba\'f3\'a3\'ac\'b0\'d1\'cb\'fc\'b8\'f8\'d2\'bb\'b8\'f6\'c1\'d9\'ca\'b1\'b1\'e4\'c1\'bf\'a1\'a3\'c8\'e7\'b9\'fb\'c1\'d9\'ca\'b1\'b1\'e4\'c1\'bf\'a3\'a8\'be\'cd\'ca\'c7\'b5\'da\'d2\'bb\'b4\'ce\'d5\'d2\'b5\'bd\'b5\'c4\'d6\'d0\'d6\'b5\'a3\'a9\'b5\'c8\'d3\'da\'bf\'d5\'d7\'d6\'b7\'fb\'a3\'ac\'b6\'f8\'c7\'d2\'c3\'bb\'d3\'d0\'b5\'bd\'d7\'ee\'d3\'d2\'b1\'df\'a3\'ac\'c4\'c7\'c3\'b4\'be\'cd\'d2\'bb\'d6\'b1\'cf\'f2\'d3\'d2\'d2\'c6\'b6\'af\'a3\'ac\'b3\'fd\'b7\'c7\'d5\'d2\'b5\'bd\'b7\'c7\'bf\'d5\'d7\'d6\'b7\'fb\
	1\'a3\'ac\'c3\'bb\'d5\'d2\'b5\'bd\'c8\'ce\'ba\'ce\'d7\'d6\'b7\'fb\'a3\'ac\'c4\'c7\'c3\'b4\'ba\'dc\'bc\'f2\'b5\'a5\'a3\'ac\'d3\'d2\'b1\'df\'c3\'bb\'d3\'d0\'a3\'ac\'d6\'b1\'bd\'d3\'b8\'c4\'d3\'d2\'b1\'df\'b1\'e4\'b3\'c9\'d6\'d0\'d6\'b5-1.\
	2\'a3\'ac \'c8\'e7\'b9\'fb\'d5\'d2\'b5\'bd\'a3\'ac\'ba\'dc\'ba\'c3\'a3\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'cd\'cb\'b3\'f6\
	3\'a3\'ac \'c8\'e7\'b9\'fb\'d5\'d2\'b5\'bd\'d2\'bb\'b8\'f6\'b1\'c8\'b8\'f8\'b6\'a8\'d6\'b5\'d0\'a1\'a3\'ac\'d7\'f3\'b1\'df\'bf\'c9\'d2\'d4\'cd\'f9\'d3\'d2\'d2\'c6\'b6\'af\'c1\'cb\'a1\'a3 left = t+1\
	4\'a3\'ac \'c8\'e7\'b9\'fb\'d5\'d2\'b5\'bd\'d2\'bb\'b8\'f6\'b1\'c8\'b8\'f8\'b6\'a8\'d6\'b5\'b4\'f3\'a3\'ac\'d3\'d2\'b1\'df\'bf\'c9\'d2\'d4\'cd\'f9\'d7\'f3\'d2\'c6\'b6\'af\'c1\'cb\'a1\'a3right = mid-1\'a3\'bb\
\
6 \'b8\'f8\'d2\'bb\'d7\'e9\'be\'d8\'d5\'f3\'a3\'ac\'be\'d8\'d5\'f3\'b5\'c4\'d0\'d0\'ca\'fd\'be\'dd\'ca\'c7\'b5\'dd\'d4\'f6\'b5\'c4\'a3\'ac\'be\'d8\'d5\'f3\'b5\'c4\'c1\'d0\'ca\'fd\'be\'dd\'d2\'b2\'ca\'c7\'b5\'dd\'d4\'f6\'b5\'c4\'a1\'a3 \'bf\'c9\'d2\'d4\'cf\'eb\'cf\'f3\'b5\'c4\'c0\'b4\'b0\'c9\'a3\'ac\'be\'cd\'ca\'c7\'d3\'d2\'cf\'c2\'bd\'c7\'b5\'c4\'ca\'fd\'be\'dd\'d7\'ee\'b4\'f3\'a3\'ac\'d7\'f3\'c9\'cf\'bd\'c7\'b5\'c4\'ca\'fd\'be\'dd\'d7\'ee\'d0\'a1\'a1\'a3\'d5\'d2\'b8\'f8\'b6\'a8\'b5\'c4\'ca\'fd\'be\'dd\
	\'c6\'e4\'ca\'b5\'ca\'d7\'cf\'c8\'d2\'aa\'c3\'f7\'b0\'d7\'be\'d8\'d5\'f3\'b5\'c4\'b9\'e6\'c2\'c9\'a1\'a3\'d2\'bb\'bf\'aa\'ca\'bc\'cf\'c8\'b8\'fa\'b5\'da\'d2\'bb\'d0\'d0\'b5\'c4\'d7\'ee\'d3\'d2\'b1\'df\'b1\'c8\'a3\'ac\'be\'cd\'ca\'c7\'d3\'d2\'c9\'cf\'bd\'c7\'a1\'a3\'c8\'e7\'b9\'fb\'b5\'c8\'d3\'da\'d6\'b1\'bd\'d3\'b7\'b5\'bb\'d8\
	\'c8\'e7\'b9\'fb\'d0\'a1\'d3\'da\'a3\'ac\'c4\'c7\'c3\'b4\'c1\'d0\'be\'cd\'bc\'f5\'c8\'a5\'d2\'bb\'c1\'d0\'a1\'a3\'c8\'e7\'b9\'fb\'b4\'f3\'d3\'da\'a3\'ac\'d0\'d0\'be\'cd\'bc\'d3\'c9\'cf\'d2\'bb\'d0\'d0\
	
\f2 \cf2 int\cf0  search(\cf2 int\cf0  a[][\cf3 4\cf0 ], \cf2 int\cf0  r, \cf2 int\cf0  c, \cf2 int\cf0  val)\
	\{\
    \cf2 int\cf0  row = \cf3 0\cf0 ;\
    \cf2 int\cf0  col = c - \cf3 1\cf0 ;\
    \cf2 while\cf0  (row < r && col >= \cf3 0\cf0 )\
    \{\
        \cf2 if\cf0 (a[row][col] == val) \cf4 // 
\f1 \cf4 \'ba\'cd\'d3\'d2\'c9\'cf\'bd\'c7\'b5\'c4\'d6\'b5\'b1\'c8\'a3\'ac\'c8\'e7\'b9\'fb\'d0\'a1\'d3\'da\'bc\'f5\'c8\'a5\'d2\'bb\'d0\'d0\'a3\'ac\'c8\'e7\'b9\'fb\'b4\'f3\'d3\'da\'bc\'d3\'c9\'cf\'d2\'bb\'c1\'d0
\f2 \cf0 \
            \cf2 return\cf0  row * c + col;\
        \cf2 else\cf0  \cf2 if\cf0 (a[row][col] < val)\
            row++;\
        \cf2 else\cf0 \
            col--;\
    \}\
    \cf2 return\cf0  -\cf3 1\cf0 ;\
\}\
\
7 
\f1 \'d0\'e8\'d2\'aa\'b6\'af\'cc\'ac\'b9\'e6\'bb\'ae
\f2 DP
\f1 \'a3\'ac
\f2  
\f1 \'bb\'b9\'d4\'da\'d1\'a7\'cf\'b0\'a1\'a3\'a1\'a3\'a1\'a3\'a1\'a3\
\
8 \'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6BST\'a3\'ac\'c7\'f3\'c3\'bf\'b8\'f6\'bd\'da\'b5\'e3\'b5\'c4rank..\'be\'cd\'ca\'c7\'cb\'fb\'b5\'c4\'bc\'b6\'b1\'f0\'a1\'a3\'b1\'c8\'c8\'e70\'a3\'ac1\'a3\'ac2\'a3\'ac3\'a3\'ac4\'a3\'ac5\'a3\'ac6 \'c4\'c7\'c3\'b46\'b5\'c4rank\'bf\'cf\'b6\'a8\'d7\'ee\'b4\'f3\'a1\'a3\'d4\'f5\'c3\'b4\'c7\'f3\
   \'d4\'da\'b9\'b9\'bd\'a8tree node\'b5\'c4\'ca\'b1\'ba\'f2\'d0\'e8\'d2\'aa\'d3\'d0\'cb\'fb\'b5\'c4left count\
	
\f2 \cf2 struct\cf0  TreeNode \{\
    \cf2 int\cf0  val;\
    \cf2 int\cf0  count;\
    \cf2 int\cf0  count_left;\
    TreeNode *left;\
    TreeNode *right;\
    TreeNode(\cf2 int\cf0  _val = \cf3 0\cf0 ): val(_val), count(\cf3 1\cf0 ), count_left(\cf3 0\cf0 ), left(\cf2 nullptr\cf0 ), right(\cf2 nullptr\cf0 ) \{\};\
\};\

\f1 //\'c3\'bb\'d3\'d0\'d3\'c3\'b5\'dd\'b9\'e9\'c5\'b6\'a3\'ac\'ce\'d2\'cf\'b2\'bb\'b6\'a3\'acwhile loop\'d2\'b2\'cd\'ac\'d1\'f9\'bf\'c9\'d2\'d4\'a1\'a3\'c8\'e7\'b9\'fb\'d0\'a1\'d3\'da\'a3\'ac\'d7\'f3\'b1\'df\'a1\'a3\'b1\'c8\'c8\'e7\'d5\'d20\'a3\'ac \'cf\'d4\'c8\'bb\'c3\'bb\'d3\'d00. \'b1\'c8\'c8\'e7\'d5\'d26\'a3\'ac root 3\'b5\'c4left count\'ca\'c73. 5\'ca\'c71\'a3\'ac \'cb\'f9\'d2\'d46\'b5\'c3result\'ca\'c73+1+1+1 = 6. \'b6\'d4\'c1\'cb\'a3\'ac \'d2\'f2\'ce\'aa6\'b1\'be\'c9\'ed\'d2\'b2\'d7\'ee\'b4\'f3
\f2 \
\cf2 int\cf0  getRank(TreeNode *root, \cf2 int\cf0  val)\
\{\
    \cf2 int\cf0  result;\
    TreeNode *ptr;\
    \
    result = \cf3 0\cf0 ;\
    ptr = root;\
    \cf2 while\cf0  (ptr != \cf2 nullptr\cf0 ) \{\
        \cf2 if\cf0  (ptr->val > val) \{\
            ptr = ptr->left;\
        \} \cf2 else\cf0  \cf2 if\cf0  (ptr->val < val) \{\
            result += ptr->count_left + \cf3 1\cf0 ;\
            ptr = ptr->right;\
        \} \cf2 else\cf0  \{\
            \cf2 break\cf0 ;\
        \}\
    \}\
    \cf2 if\cf0  (ptr != \cf2 nullptr\cf0 ) \{\
        result += ptr->count_left;\
        \cf2 return\cf0  result;\
    \} \cf2 else\cf0  \{\
        \cf2 return\cf0  -\cf3 1\cf0 ;\
    \}\
\}\

\f1 //\'b9\'b9\'bd\'a8\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'b5\'b1\'b3\'f6\'cf\'d6\'d7\'f3\'d6\'b5\'b5\'c3\'ca\'b1\'ba\'f2\'a3\'ac\'c4\'c7\'c3\'b4\'be\'cd\'d4\'da\'c6\'e4left count++ \'b1\'c8\'c8\'e70\'a3\'ac1\'a3\'ac2\'a3\'ac3\'a3\'ac4\'a3\'ac5\'a3\'ac6. \'ce\'aa\'ca\'b2\'c3\'b4\'c0\'cf\'ca\'c7\'d5\'e2\'b8\'f6\'c0\'fd\'d7\'d3\'a1\'a3OK 0\'a3\'ac2 \'a3\'ac4\'a3\'ac6count\'b6\'bc\'ca\'c70. 1\'a3\'ac5\'ca\'c71\'a3\'ac root 3 \'ca\'c73
\f2 \
\cf2 void\cf0  insertNode(TreeNode *&root, \cf2 int\cf0  val)\
\{\
    \cf2 if\cf0  (root == \cf2 nullptr\cf0 ) \{\
        root = \cf2 new\cf0  TreeNode(val);\
    \} \cf2 else\cf0  \cf2 if\cf0  (val == root->val) \{ 
\f1 \'c8\'e7\'b9\'fb\'ba\'cdroot\'d6\'b5\'d2\'bb\'d1\'f9\'a3\'acroot count\'be\'cd\'bc\'d31
\f2 \
        ++(root->count);\
    \} \cf2 else\cf0  \cf2 if\cf0  (val < root->val) \{\
        ++(root->count_left);  
\f1 \'d7\'f3\'d6\'b5\'bc\'d3\'d2\'bb\'a3\'ac\'bf\'c9\'d2\'d4\'cf\'eb\'cf\'f3\'a3\'ac\'d7\'ee\'d7\'f3\'b1\'df\'b5\'c4count\'d7\'ee\'b4\'f3
\f2 \
        insertNode(root->left, val);\
    \} \cf2 else\cf0  \{\
        insertNode(root->right, val);\
    \}\
\}\
}